#+title Ox Emacs Configuration
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :lexical t :auto-tangle t

* Things to test
- Should consider trying out the [[https://github.com/emacsmirror/gcmh][GCMH]] package instead of manually tweaking the garbage collector treshold 
- [[https://codeberg.org/akib/emacs-eat][Eat]] terminal emulator 
- [[https://github.com/linktohack/evil-commentary][evil-commentary]] to have easy and fast commenting motions in evil mode
- [[https://github.com/ema2159/centaur-tabs][Centaur tabs]] for modern tabs management
- [[https://github.com/for-GET/know-your-http-well][know-your-http-well]] HTTP headers, media-types, methods, relations and status codes, all summarized and linking to their specification. 
- Set lexical binding for *scratch* buffer with (setq lexical-binding t)
- Check for [[https://github.com/alphapapa/org-bookmark-heading][org-bookmark-heading]]
* Startup Performance

[[(setenv "LSP_USE_PLISTS" "true"][LSP_USE_PLISTS]] settled to true make lsp use plists needed for [[https://github.com/blahgeek/emacs-lsp-booster][emacs-lsp-booster]]
testing to keep [[(setq gc-cons-threshold 200000000][gc-cons-threshold]] at a high value to increase lsp performances remove the reduction [[(setq gc-cons-threshold (* 2 1000 000][here]]

Uncomment [[;;(advice-add 'garbage-collect][;;(advice-add 'garbage...]] if you want to allow the debug of garbage collection.

#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
(setenv "LSP_USE_PLISTS" "true")
(setq gc-cons-threshold most-positive-fixnum
    read-process-output-max (* 4 1024 1024) ;; 4mb
    gc-cons-percentage 0.6)
(add-hook 'emacs-startup-hook
    (lambda ()
	;; Settle to a balanced interactive setting and activate gcmh
	(setq gc-cons-percentage 0.1)
	(gcmh-mode 1)))
;;(gcmh-mode 1)
;;(setq gc-cons-threshold 200000000)

;; Debug calls to garbage collect
(defun my/logging-garbage-collect ()
  "Wrapper around `garbage-collect` that always logs."
  (let ((result (funcall (symbol-function 'garbage-collect))))
    (message "Garbage collection #%d done" (cl-incf my/gc-counter))
    result))
;;(advice-add 'garbage-collect :around #'my/logging-garbage-collect)

;;(setq gc-cons-threshold (* 50 1000 000))
(defun ox/display-startup-time()
(message "Emacs loaded in %s with %d garbage collections."
    (format "%.2f seconds"
	    (float-time
	     (time-subtract after-init-time before-init-time)))
    gcs-done))

(add-hook 'emacs-startup-hook #'ox/display-startup-time)
#+end_src
* Variables
#+begin_src emacs-lisp
;; Not if you want to move everything out of the ~/.emacs.d folder reliabily, set `user-emacs-directory` before loading the no-littering!
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))
(setq straight-base-dir "~/.cache/emacs/"
      native-comp-eln-load-path '("~/.cache/emacs/eln-cache/"))
(unless (file-directory-p "~/.cache/emacs/")
  (make-directory "~/.cache/emacs/" t))
(unless (file-directory-p "~/.cache/emacs/eln-cache/")
  (make-directory "~/.cache/emacs/eln-cache/" t))

;; Changing elpa default dir to ~/.cache/emacs
(setq package-user-dir (expand-file-name "~/.cache/emacs/elpa"))
;; gnupg still search the key in ~/.emacs.d/elpa/gnupg
(setq package-gnupghome-dir (expand-file-name "elpa/gnupg" user-emacs-directory))

(setq my-project-path "~/dev")
(setq my-org-directory "~/org")
(setq my-font-size 200)
(if (eq system-type 'darwin)
    (progn (setq my-opacity 30)
	   (setq my-switch-to-persp-key "s")
	   (setq my-switch-to-next-persp-vterm-key "s-]")
	   (setq my-switch-to-prev-persp-vterm-key "s-["))
  (progn (setq my-opacity 90)
	 (setq my-switch-to-persp-key "M")
	 	   (setq my-switch-to-next-persp-vterm-key "C-}")
	 	   (setq my-switch-to-prev-persp-vterm-key "C-{")))
(setq my-leader-key "SPC")
;; (setq my-linux-font "Fira Code")
;; (setq my-windows-font "Fira Code")
;;(setq my-linux-font "Ubuntu Mono")
;;(setq my-wsl-font "Fira Code Retina")
;; (setq my-linux-font "0xProto Nerd Font")
;; (setq my-windows-font "0xProto Nerd Font")

(setq my-linux-font "CaskaydiaCove Nerd Font")
(setq my-windows-font "CaskaydiaCove Nerd Font")

(setq my-org-files
      (mapcar (lambda (file)
                (format "%s/org-files/%s" my-org-directory file))
              '("Tasks.org" "todo.org" "Habits.org" "Shopping.org" "Journal.org" "birthdays.org" "Activities.org")))

(setq ox/enable-ivy nil )
(setq ox/enable-vertico t)
(setq ox/enable-cape t )
#+end_src

* Configure straight and use-package

#+begin_src emacs-lisp
(require 'package)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

;;(setq use-package-always-defer t)
;;(setq use-package-always-ensure nil)
(setq package-enable-at-startup nil)
(setq package-native-compile t)
;;(setq use-package-compute-statistics t)
;;(setq use-package-verbose t)
#+end_src

* Keep Folders Clean

We use the no-littering package to keep folders where we edit files and the Emacs configuration folder clean ! it knows a wide variety of variables for built in Emacs Features as well as those from community packages so it can be much easier than finding and setting these variable ourselves.

#+begin_src emacs-lisp
;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering
:straight t)

;; Keep customization settings in a temporary file (thanks Ambrevar!)
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
;; no-littering doesn't set this by default so we must place auto save files in the same path as it uses for sessions

(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src
* Tweak yes or no prompts
#+begin_src emacs-lisp
;; Replace yes-or-no-p with y-or-n-p
(setq use-short-answers t)

;; Don't confirm when opening non-existent files/buffers
(setq confirm-nonexistent-file-or-buffer nil)

;; Don't ask about attached processes when killing buffers
(setq kill-buffer-query-functions
  (remq 'process-kill-buffer-query-function
         kill-buffer-query-functions))
#+end_src
* Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :straight t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;;(load-theme 'doom-challenger-deep t)
    ;;(load-theme 'doom-moonlight t)
    (load-theme 'doom-outrun-electric t)
    (set-face-attribute 'line-number nil :foreground "purple")


    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** Modeline themes
#+begin_src emacs-lisp
(use-package doom-modeline
  :straight t
  :init (doom-modeline-mode 1)
  :custom
  (doom-modeline-height 1)
  :config
  (set-face-attribute 'mode-line nil :height 150)
  (setq doom-modeline-time-analogue-clock nil))
#+end_src

* Basic UI Configuration
#+begin_src emacs-lisp
(setq inhibit-startup-message t ; Don't show the spalsh screen
      ring-bell-function 'ignore
      visible-bell nil  ; Stop screen to flash when the bell rings
      tab-bar-show 1) ;; if there is more than one tab it shows the tab bar

;; Turn off some uneeded ui elements
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(tooltip-mode -1) ;; Disable tooltips
(set-fringe-mode 10) ;; give some breathing room

;;(set-frame-parameter nil 'alpha-background 70) ; For current frame
;;(add-to-list 'default-frame-alist '(alpha-background . 70)) ; For all new frames henceforth
(column-number-mode)
(global-display-line-numbers-mode 1) ;Show line numbers
(setq display-line-numbers-type 'relative)
;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
		term-mode-hook
		shell-mode-hook
		eshell-mode-hook
		vterm-mode-hook
		treemacs-mode-hook
		reader-mode-hook
		doc-view-mode-hook
		compilation-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

(cond ((string-match-p "Microsoft" (shell-command-to-string "uname -a"))
    (setq frame-title-format "EmacsWSL"))
      ((string-match-p "Darwin" (shell-command-to-string "uname -a"))
       (progn
	 ;; Remove decorations dynamically on macOS using emacs-plus patch
         (set-frame-parameter nil 'undecorated-round t)
	 (add-to-list 'default-frame-alist '(drag-internal-border . 1)) ;;Help to drag window when no title bar
	 ;; remove decorations to every new frame
	 (add-hook 'after-make-frame-functions
		   #'(lambda (frame)
		       (with-selected-frame frame
			 (set-frame-parameter frame 'undecorated-round t)
			 (add-to-list 'default-frame-alist '(drag-internal-border . 1))))) ;;Help to drag window when no title 
	 (add-to-list 'default-frame-alist '(internal-border-width . 9)))) ;; helpful to see full letters at bottom
      ((and (not (string-match-p "Microsoft" (shell-command-to-string "uname -a")))
	 (not (string-match-p "Darwin" (shell-command-to-string "uname -a"))))
       (progn
	 (set-frame-parameter nil 'undecorated t) ;; Remove title bar and decorations dynamically
	 (add-to-list 'default-frame-alist '(drag-internal-border . 1)) ;;Help to drag window when no title bar
	 (add-to-list 'default-frame-alist '(internal-border-width . 9)) ;; helpful to see full letters at bottom
	 (add-to-list 'default-frame-alist '(undecorated . t))))) ;; Remove title bar, and every decorations

(set-frame-parameter nil 'alpha-background my-opacity) ; For current frame
(add-to-list 'default-frame-alist `(alpha-background . ,my-opacity)) ; For all new frames henceforth
#+end_src

* Ligatures
#+begin_src emacs-lisp
(use-package ligature
:straight t
  :load-path "path-to-ligature-repo"
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+end_src

* EAF
#+begin_src emacs-lisp
  (use-package eaf
    :disabled t
    :straight t
    :load-path "~/.cache/emacs/site-lisp/emacs-application-framework"
    :custom
					  ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
    (eaf-browser-continue-where-left-off t)
    (eaf-browser-enable-adblocker t)
    (browse-url-browser-function 'eaf-open-browser)
    ;;(eaf-browser-auto-import-chrome-cookies t)
    :config
    (defalias 'browse-web #'eaf-open-browser)
    ;; (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    ;; (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    ;; (eaf-bind-key take_photo "p" eaf-camera-keybinding)
    ;; (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki
  ;; (setq eaf-webengine-pc-user-agent "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36")
  (setq eaf-webengine-pc-user-agent "Mozilla/5.0 (X11; Linux i686; rv:109.0) Gecko/20100101 Firefox/118.0")
    (require 'eaf-browser))
  ;;(global-unset-key (kbd "<f1>"))
  ;;(define-key eaf-mode-map (kbd "<f1>") #'eaf-send-key)


  ;;(require 'eaf-pyqterminal)
  ;;(require 'eaf-pdf-viewer)

#+end_src
* Workspaces
Using persp-mode to create different workspaces
** persp-mode
#+begin_src emacs-lisp
  (use-package persp-mode
    :straight t
    :defer t
    ;;:hook (persp-mode-hook . my-update-dynamic-persps)
    :init
    (add-hook 'window-setup-hook #'(lambda () (persp-mode 1)))
    ;;(add-hook 'persp-mode-hook 'my-update-dynamic-persps)
    :config


    (defun consult-persp-buffer ()
      "Switch to a buffer within the current perspective using consult."
      (interactive)
      (let* ((persp-buffers (mapcar #'buffer-name (persp-buffer-list-restricted)))
	     (buffer (consult--read persp-buffers
				    :prompt "Switch to buffer (current perspective): "
				    :sort t
				    :require-match t
				    :category 'buffer
				    :state (consult--buffer-state))))
	(switch-to-buffer buffer)))

    (global-set-key (kbd "C-x b") 'consult-persp-buffer)

    ;; Add vterm buffers to the current perspective when starting them
    ;; Automatically add buffers to current perspective when their major mode changes
    (setq persp-add-buffer-on-after-change-major-mode t)

    (defun my-persp-buffer-filter (buf)
      "Filter out buffers that start with an asterisk, except for vterm buffers."
      (let ((buf-name (buffer-name buf)))
	(not (or (and (string-prefix-p "*" buf-name)
		      (string-prefix-p "*vterm" buf-name))))))

    ;; Add the custom filter function
    (add-hook 'persp-common-buffer-filter-functions #'my-persp-buffer-filter)

    ;; Making harpoon maintaining a seperates set of bookmarks to each perspective
    ;; (defun harpoon--file-name ()
    ;;   "File name for harpoon on current project."
    ;;   (let ((persp-name (if (and (boundp 'persp-mode) persp-mode)
    ;; 			    (safe-persp-name (get-current-persp))
    ;; 			  "none")))
    ;; 	(concat harpoon-cache-file persp-name "_" (harpoon--cache-key))))

    (defun ox/find-first-vterm-in-persp ()
      "Find the first *vterminal<n>* buffer in the current perspective, in last-used order."
      (interactive)
      (let* ((all-buffers-in-emacs (buffer-list))
	     (all-buffers-in-persp (persp-buffer-list-restricted))
	     (sorted-buffers-in-persp (cl-remove-if-not (lambda (buf) (member buf all-buffers-in-persp)) all-buffers-in-emacs))
	     (first-vterm-buffer (cl-find-if (lambda (buf) (string-match-p "^\\*vterminal<[0-9]+>\\*$" (buffer-name buf))) sorted-buffers-in-persp)))
	(if first-vterm-buffer
	    first-vterm-buffer
	  nil)))

    (defun switch-to-last-persp-vterm ()
      "Switch to the last visited vterm buffer within the current perspective."
      (interactive)
      (let ((last-persp-vterm-buffer (ox/find-first-vterm-in-persp)))
	(message "vterm buffer is :%s" last-persp-vterm-buffer)
	(if last-persp-vterm-buffer
	    (switch-to-buffer last-persp-vterm-buffer)
	  (message "No last vterm buffer in this perspective to switch to.")
	  nil)))

    (global-set-key (kbd "C-c v") 'switch-to-last-persp-vterm)

    (defun switch-to-next-persp-vterm-from-last (&optional offset)
      "Switch to the next vterm buffer in the current perspective, starting from the last visited vterm buffer.
  OFFSET can be provided to skip a given number of buffers."
      (interactive "P")
      (let* ((offset (or offset 1))
	     (last-persp-vterm-buffer (ox/find-first-vterm-in-persp))
	     (all-vterm-buffers multi-vterm-buffer-list)
	     (persp-buffers (persp-buffer-list-restricted))
	     (persp-vterm-buffers (cl-intersection all-vterm-buffers persp-buffers :test 'eq))
	     (buffer-list-len (length persp-vterm-buffers))
	     (start-buffer (or last-persp-vterm-buffer (current-buffer)))
	     (my-index (cl-position start-buffer persp-vterm-buffers :test 'eq)))
	(if my-index
	    (let ((target-index (mod (+ my-index offset) buffer-list-len)))
	      (switch-to-buffer (nth target-index persp-vterm-buffers)))
	  (when persp-vterm-buffers
	    (switch-to-buffer (car persp-vterm-buffers))))))

    (defun switch-to-prev-persp-vterm-from-last (&optional offset)
      "Switch to the previous vterm buffer in the current perspective, starting from the last visited vterm buffer.
  OFFSET can be provided to skip a given number of buffers."
      (interactive "P")
      (switch-to-next-persp-vterm-from-last (- (or offset 1))))



    (global-set-key (kbd my-switch-to-next-persp-vterm-key) 'switch-to-next-persp-vterm-from-last)
    (global-set-key (kbd my-switch-to-prev-persp-vterm-key) 'switch-to-prev-persp-vterm-from-last)



    ;; to share buffers in all perspectives
    ;;(defvar persp-shared-buffers '("*scratch*" "*Messages*" "*Backtrace*"))
    ;;(add-hook 'persp-activated-functions
    ;;#'(lambda (_)
    ;;(persp-add-buffer persp-shared-buffers)))


    (setq persp-autokill-buffer-on-remove 'kill-weak)
    (add-hook 'window-setup-hook #'(lambda () (persp-mode 1)))

    (defvar my-dynamic-persps '()
      "List of dynamic perspectives, ordered by creation.")

    (defun my-update-dynamic-persps1 ()
      "Update `my-dynamic-persps` with the current list of perspectives."
      ;;(message persp-names-cache)
      ;;(message 'persp-names-current-frame-fast-ordered)
      ;;(setq my-dynamic-persps (persp-names-current-frame-fast-ordered))
      (setq my-dynamic-persps (copy-sequence persp-names-cache))
      ;;(message "Updated my-dynamic-persps: %s" (mapconcat 'identity my-dynamic-persps ", ")))
      )

    (defun my-update-dynamic-persps ()
      "Update `my-dynamic-persps` with the current list of perspectives from `persp-names-cache`."
      (setq my-dynamic-persps (remove "none" persp-names-cache)))

    (advice-add 'persp-kill :after (lambda (&rest _) (my-update-dynamic-persps)))
    (advice-add 'persp-switch :after (lambda (&rest _) (my-update-dynamic-persps)))
    (advice-add 'persp-add-new :after (lambda (&rest _) (my-update-dynamic-persps)))

    (defun my-switch-to-persp (name)
      "Switch to the perspective with NAME and update `my-dynamic-persps`."
      (interactive "sEnter perspective name: ")
      (when name
	(persp-switch name)))

    (defun my-switch-to-persp-by-number (number)
      "Switch to a perspective based on its position in `my-dynamic-persps`."
      (interactive "nPress the number key for the perspective: ")
      (if (eq number 0)
	  (my-switch-to-persp "none")
	(let ((name (nth (1- number) (remove "none" my-dynamic-persps))))
	  (if name
	      (my-switch-to-persp name)
	    (message "No perspective at position %d" number)))))

    ;; Initialize the list of dynamic perspectives at startup
    ;;(add-hook 'after-init-hook 'my-update-dynamic-persps)
    ;;(add-hook 'persp-mode-hook 'my-update-dynamic-persps)

    ;; Keybinding to create or switch to a named perspective
    (global-set-key (kbd "C-x p n") 'my-switch-to-persp)

    ;; Keybindings for Alt+numbers
    (dotimes (i 10)  ;; Loop from 0 to 9
      (let ((key (format "%s-%d" my-switch-to-persp-key i)))
	(global-set-key (kbd key) `(lambda () (interactive) (my-switch-to-persp-by-number ,i))))))
  ;; (eval-after-load 'persp-mode
  ;;   '(my-update-dynamic-persps))
  (defvar my-persp-init-timer nil
    "Timer object for delayed initialization of my-dynamic-persps.")

  (defun my-check-persp-init ()
    "Check if perspectives other than 'none' are available in `persp-names-cache` and initialize if so."
    (when (and persp-names-cache (> (length persp-names-cache) 1))
      (my-update-dynamic-persps)
      (when my-persp-init-timer
	(cancel-timer my-persp-init-timer)
	(setq my-persp-init-timer nil))))

  (with-eval-after-load 'persp-mode
  (setq my-persp-init-timer (run-with-timer 0 1 'my-check-persp-init)))

(defvar my-last-visited-persp "none") ;; Variable holding last visited persp

(defun ox/switch-to-last-persp ()
  "Switch to the last known perspective"
  (interactive)
    (persp-switch my-last-visited-persp))

;; Hook to track last known perspective for ox/switch-to-last-persp function
(add-hook 'persp-before-switch-functions
          (lambda (new-persp old-persp)
            ;; If old-persp or new-persp is a frame, get the associated perspective
            (let* ((old-persp (if (framep old-persp)
                                  (get-frame-persp old-persp)
                                old-persp))
                   (new-persp (if (framep new-persp)
                                  (get-frame-persp new-persp)
                                new-persp))
                   (old-name (if (perspective-p old-persp)
                                 (persp-name old-persp)
			       (if (eq old-persp  nil)
				   (format "none")
				 (format "%s" old-persp))))  ;; Ensure old-persp is a string
                   (new-name (if (perspective-p new-persp)
                                 (persp-name new-persp)
                               (format "%s" new-persp)))) ;; Ensure new-persp is a string
              ;; Switch the names here to display the correct old to new perspective
              ;;(print (format "Switching from %s to %s" new-name old-name))
	      (setq my-last-visited-persp old-name))))
#+end_src

** my-switch-to-project
Search for known or opened projects and open it in it's own perspective for convenience
Since at the start of emacs the project--list variable is unset we have to populate it ourselve
with project-known-project-roots function

It can also add projects on the fly with the Add project option
#+begin_src emacs-lisp
(defun my-switch-to-project ()
  "Switch or open a project in its own perspective, with an option to add a new project."
  (interactive)
  (project-known-project-roots)
  (let* ((projects (append (mapcar #'identity (project-known-project-roots)) '("Add Project...")))
         (project (consult--read
                   projects
                   :prompt "Choose a project (or Add Project): "
                   :sort t)))
    (if (string-equal project "Add Project...")
        (setq project (read-directory-name "Select project directory: "))
          (message "Project added: %s" project))
      (my-switch-to-persp (file-name-nondirectory (directory-file-name project)))
      (project-switch-project project)))
#+end_src

* Font Configuration
#+begin_src emacs-lisp
;; Set font
;; (if (or (eq system-type 'gnu/linux) (eq system-type 'darwin))
;;     (set-face-attribute 'default nil :family my-linux-font :height my-font-size)
;;   (set-face-attribute 'default nil :family my-windows-font :height my-font-size))
;;(set-face-attribute 'default nil :font "FiraCode Nerd Font" :height 140)


(defun my/apply-fonts ()
  "Apply default and fixed-pitch fonts depending on system."
  (let ((font-family (if (or (eq system-type 'gnu/linux) (eq system-type 'darwin))
                         my-linux-font
                       my-windows-font)))
    ;; Set default face
    (set-face-attribute 'default nil :family font-family :height my-font-size)
    ;; Set fixed-pitch face for tables, code blocks, etc.
    (set-face-attribute 'fixed-pitch nil :family font-family :height 0.8)))

;; Apply once on startup
(my/apply-fonts)

;; Reapply after any theme change
(add-hook 'after-load-theme-hook #'my/apply-fonts)

(defun ox/first-available-font (&rest families)
  (seq-find (lambda (f) (member f (font-family-list))) families))

;; Prefer a font that actually has U+1F5C0:
(let ((sym (ox/first-available-font
            "Noto Sans Symbols 2" "Apple Symbols" "Symbola" "Segoe UI Symbol")))
  (when sym
    ;; Wide pictograph blocks (covers U+1F5C0 among many)
    (set-fontset-font t '(#x1F300 . #x1FAFF) (font-spec :family sym) nil 'prepend)
    ;; Also map generic 'symbol' script so other symbols fall back cleanly
    (set-fontset-font t 'symbol (font-spec :family sym) nil 'prepend)))

;; Emoji fallback (if needed)
(let ((emoji (ox/first-available-font "Apple Color Emoji" "Noto Color Emoji" "Segoe UI Emoji")))
  (when emoji
    (set-fontset-font t 'emoji (font-spec :family emoji) nil 'prepend)))
#+end_src
* Basic Settings
#+begin_src emacs-lisp
(setq native-comp-async-report-warnings-errors nil) ;; Remove warning of compiled package with Emacs compiled with Native flag
(setq native-comp-deferred-compilation t) ;; To compile all site-lisp on demand (repos/AUR packages, ELPA, MELPA, whatever)
 (setq native-compile-prune-cache t) ;; And to keep the eln cache clean add 
(setq native-comp-async-query-on-exit t) ;; Prevent emacs from quitting if some pakages are compiling
(setq native-comp-async-jobs-number 4)
;;(load-theme 'deeper-blue t)

;; Make ESC quit prompts
;;(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(recentf-mode 1) ;; Enable the recent file mode to select with a number recent files
(setq recentf-max-menu-items 50)
(setq recentf-max-saved-items 50)
(save-place-mode 1) ;; set cursor at last location known when visiting a file
(savehist-mode 1)
(setq desktop-dirname "~/.cache/emacs/var/desktop") ; Set directory for saving/restoring
(setq desktop-path (list desktop-dirname)) ; Ensure Emacs looks in this path
(desktop-save-mode 1)
;; (add-to-list 'desktop-locals-to-save 'evil-markers-alist) ;; Make evil marks saved accross working sessions
;; (add-to-list 'desktop-globals-to-save 'evil-markers-alist) ;; Make evil marks saved accross working sessions

(display-time-mode 1) ;;Display the time
(pixel-scroll-precision-mode 1)
(setq display-time-day-and-date 1)
(setq display-time-default-load-average nil) ;; Disable load time display

;; Nove customization variables to a separate file and load it
(setq custom-file (locate-user-emacs-file "custom-vars.el"))
(load custom-file 'noerror 'nomessage)

;; Don't pop up UI dialogs when prompting
(setq use-dialog-box nil)

;; Rever buffers when the underlying file has changed
(global-auto-revert-mode 1)

;; Revert Dired and other buffers
(setq global-auto-revert-non-file-buffers t)
;; Preserve pixel size when resizing (a must have in tiling WM to prevent useless gaps)
;; Until i find a solution to make awesome WM ignore ICCCM 
(setq frame-resize-pixelwise t)

;; Avoid constant errors on Windows about the coding system by setting the default to UTF-8.
(set-default-coding-systems 'utf-8)

;; Start automatically the daemon
;;(server-start)
;; Mode to log commands use clm/open-command-log-buffer to see them
(use-package command-log-mode
:straight t
:commands command-log-mode)
;; install all the icons
(use-package all-the-icons
:straight t)

;; make unique colors for each parentheses pair to see better delimitation
(use-package rainbow-delimiters
  :straight t
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* General.el Configuration
#+begin_src emacs-lisp
;; Go to end of line and eval last sexp
(defun ox/eval()
  (interactive)
  (end-of-line)
  (eval-last-sexp nil))

(defun ox/compile (ox/command)
  (interactive "sCommand: ")
  ;;(setq-local buffer-save-without-query nil)
  (save-buffer)
  (compile (format "%s" ox/command))
  (switch-to-buffer "*compilation*")
  (delete-other-windows))

(defun ox/recompile()
  (interactive)
  (save-buffer)
  (ignore-errors (kill-compilation)) ;; interrupt old compilation
  (recompile)
  (switch-to-buffer "*compilation*")
  (delete-other-windows))


(defun my/go-to-scratch ()
  "Go to the persp none and focus on the *scratch* buffer"
  (interactive)
  (persp-frame-switch "none")
  (scratch-buffer))

;; Better keybinding management 
(use-package general
  :straight t
  :after which-key
  :config
  (general-define-key
   "C-c C-v" 'compile-and-execute-c-code
   "C-c m" 'compile-or-recompile
   "C-c C-b" 'switch-to-previous-buffer
   "M-o" 'multi-vterm-dedicated-toggle
   "<escape>" 'keyboard-escape-quit)	; Make escape key quit prompts
  ;;(defconst my-leader "C-SPC")
  ;; Creating a leader key
  (defconst my-global-leader "C-SPC")
  (defconst my-leader "SPC")
  (general-create-definer ox/leader-keys
    :keymaps '(normal insert visual emacs)
    ;;:keymaps '(normal)
    :prefix my-leader
    :global-prefix my-global-leader)
  (ox/leader-keys
    "r" '(restart-emacs :which-key "restart")
    "b" '(frog-jump-buffer :which-key "frog-jump-buffer")

    ";" '(comment-or-uncomment-region :which-key "comment or uncomment region")
    "\\" '(ox/eval :which-key "eval-last-sexp")

    "ff" '(find-file :which-key "find-file")
    "fe" '((lambda () (interactive) (find-file "~/terminalConfigs/.dotfiles/emacs/.emacs.d/Emacs.org")) :which-key "Open Emacs.org")
    "fl" '(ox/ledeb-dired :which-key "dired-ledeb")
    "fp" '(consult-project-buffer :which-key "consult-project-buffer")
    "fd" '(consult-find :which-key "consult-find")
    "fg" '(consult-grep :which-key "consult-grep")
    "fa" '(consult-org-agenda :which-key "consult-org-agenda")
    "fh" '(consult-org-heading :which-key "consult-org-heading")
    "fr" '(consult-recent-file :which-key "Consult recent files")
    "fs" '(ox/sudo-find-file :which-key "Open files as sudo")
    "ft" '(treemacs-select-window :which-key "Open treemacs")
    "fc" '(consult-dir :which-key "consult-dir")
    "fz" '(my/go-to-scratch :which-key "Go to scratch buffer in the none perspective")

    "p" '(:ignore t :which-key "projects")
    "pp" '(my-switch-to-project :which-key "Open/switch project in persp")
    "pf" '(project-forget-project :which-key "Forget project")

    "c" '(:ignore t :which-key "compiling")
    "cc" '(compile :which-key "compile")
    "cd" '(ox/compile :which-key "ox/compile")
    "cr" '(ox/recompile :which-key "ox/recompile")))
#+end_src
* Navigation Enhancement
A side note you can change between both stack by changing ox/enable-ivy ox/enable-vertico between nil and t to change what's is gonna be tangle in the init.el file
** Which-key
#+begin_src emacs-lisp
(use-package which-key
   :straight t
   :after evil
  ;;:defer 0
  ;;:init (which-key-mode)
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.3))
#+end_src

** Ivy/counsel/swiper/company
#+begin_src emacs-lisp :tangle (if  ox/enable-ivy "./init.el" "no")
(use-package ivy
  :straight t
  :diminish
  :bind (("C-s" . swiper)
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-j" . ivy-next-line)
	 ("C-k" . ivy-previous-line)
	 :map ivy-switch-buffer-map
	 ("C-k" . ivy-previous-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) "))



(use-package prescient
  :straight t
  :after counsel
  :config
  (prescient-persist-mode 1))

(use-package ivy-prescient
  :straight t
  :after prescient
  :config
  (ivy-prescient-mode 1))

(use-package all-the-icons-ivy-rich
  :straight t
  :after ivy
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))
(use-package ivy-rich
  :straight t
  :after ivy
  :init
  (ivy-rich-mode 1))

(use-package lsp-ivy
  :straight t
  :after lsp-mode ivy)
;; To allow M-x to be sorted from most recent used 
(use-package smex
  :disabled
  :straight t
  :after ivy
  :config
  (smex-initialize))

(use-package counsel
  :straight t
  :after which-key
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-switch-buffer)
	 ("C-x C-f" . counsel-find-file)
	 ("C-M-J" . counsel-load-theme)
	 ("C-s" . counsel-grep-or-swiper)
	 ([remap describe-function] . counsel-describe-function)
	 ([remap describe-command] . helpful-command)
	 ([remap describe-variable] . counsel-describe-variable)
	 ([remap describe-key] . helpful-key)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :config
  (ox/leader-keys
    "t" '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "Load themes"))
  (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^
(use-package counsel-projectile
  :straight t
  :after projectile
  :config (counsel-projectile-mode))

(use-package company
  :straight t
  :after lsp-mode
  :hook ((prog-mode . company-mode)
         (lisp-interaction-mode . company-mode))
  :bind (:map company-active-map
	      ("<tab" . company-complete-selection))
  (:map lsp-mode-map
	("<tab>" . company-indent-or-complete-common))
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))

(use-package company-box
  :straight t
  :hook (company-mode . company-box-mode))

(use-package yasnippet
  :straight t
  :hook (prog-mode . yas-minor-mode)
  :config
  (add-to-list 'yas-snippet-dirs (expand-file-name "~/.emacs.d/snippets"))
  (yas-reload-all))
(setq yas-snippet-dirs nil)

(use-package yasnippet-snippets
  :straight t
  :after yasnippet)
#+end_src

** Vertico/consult/orderless/marginalia/embark/corfu

As of temporary situation waiting for the [[https://github.com/AndreaCrotti/yasnippet-snippets/pull/504][PR]] to yasnippet-snippets [[:straight '(yasnippet-snippets :host github][I am using my fork]]

Using a [[(defun my-org-mode-remove-pcomplete (][hook]]  to remove pcomplete-completions-at-point from org-mode because it triggers lsp-completions which I does not want in org files.

#+begin_src emacs-lisp :tangle (if  ox/enable-vertico "./init.el" "no")
(defun ox/minibuffer-backward-kill (arg)
  "When minibuffer is completing a file name delete up to parent
folder, otherwise delete a word"
  (interactive "p")
  (if minibuffer-completing-file-name
      ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
      (if (string-match-p "/." (minibuffer-contents))
	  (zap-up-to-char (- arg) ?/)
	(delete-minibuffer-contents))
    (backward-kill-word arg)))

(defun my-vertico-alt-done ()
  "Mimic the behavior of `ivy-alt-done' in Vertico."
  (interactive)
  (if-let ((file (vertico--candidate)))
      (if (file-directory-p file)
	  (vertico-insert)
	(vertico-exit))
    (vertico-exit-input)))


(use-package vertico
  :straight '(vertico :host github
		      :repo "minad/vertico"
		      :branch "main")
  :bind (:map vertico-map
	      ;; ("C-j" . vertico-next)
	      ;; ("C-k" . vertico-previous)
					;("C-f" . vertico-exit)
	      ("C-f" . vertico-exit-input)
	      ;;("C-f" . my-vertico-alt-done)
	      ("TAB" . my-vertico-alt-done)
	      ("?" . minibuffer-completion-help)
	      ("RET" . minibuffer-force-complete-and-exit)
	      ;;("M-TAB" . minibuffer-complete)
	      ("M-TAB" . vertico-exit-input)
	      :map minibuffer-local-map
	      ;;("M-h" . ox/minibuffer-backward-kill)
	      ("M-h" . vertico-directory-up)
	      )
  :custom
  (vertico-cycle t)
  :custom-face
  (vertico-current ((t (:background "#3a3f5a"))))
  :init
  (savehist-mode)
  (vertico-mode))

(use-package yasnippet
  :straight t
  :hook ((prog-mode html-mode) . yas-minor-mode)
  :config
  (yas-reload-all))

(use-package yasnippet-snippets
    :straight '(yasnippet-snippets :host github
		       ;;:local-repo "/home/oxhart/builds/ranger.el/"
		       :repo "S0mbr3/yasnippet-snippets"
		       :branch "js/ts-treesitter")
  :after yasnippet)


(use-package corfu
  ;; :straight '(corfu :host github
  ;; 		    :repo "minad/corfu")
  :straight (corfu :files (:defaults "extensions/*")
		   :includes (corfu-info corfu-history))

  :bind (:map corfu-map
	      ("C-j" . corfu-next)
	      ("C-k" . corfu-previous)
	      ("C-f" . corfu-insert)
	      ("C-e" . corfu-quit)
	      ("M-p" . corfu-popupinfo-scroll-up)
	      ("M-n" . corfu-popupinfo-scroll-down))
  :custom
  (corfu-auto t)
  (corfu-cycle t)
  (corfu-auto-delay 0.0)
  ;;(corfu-auto-delay 0)
  (corfu-auto-prefix 1)
  :config
  (general-define-key
   :states 'insert
   "C-e" 'corfu-quit)

  :init
  (global-corfu-mode)
  (corfu-popupinfo-mode))


(use-package cape
  :straight t
  :after corfu
  :hook ((lsp-after-initialize  prog-mode org-mode text-mode makefile-mode) . +cape-capf-hook)
  :init
  (defun +cape-capf-hook()
    (if (or (derived-mode-p 'lisp-interaction-mode)
            (derived-mode-p 'emacs-lisp-mode)
	    (derived-mode-p 'org-mode)
	    (derived-mode-p 'text-mode)
	    (derived-mode-p 'makefile-mode))
	(progn
	  (setq completion-at-point-functions
      (list (cape-capf-super #'yasnippet-capf #'cape-dabbrev)))
	  (add-to-list 'completion-at-point-functions #'cape-file))
      (progn
	(add-to-list 'completion-at-point-functions
                     (cape-capf-super #'yasnippet-capf #'lsp-completion-at-point #'cape-dabbrev))
        (add-to-list 'completion-at-point-functions #'cape-file))))
;;   ;; Disable lsp-completion-mode from being automatically enabled
;; (with-eval-after-load 'lsp-mode
;;   (add-hook 'lsp-configure-hook 'lsp-completion--disable))
)

(use-package yasnippet-capf
  :straight '(yasnippet-capf :host github
			     :repo "elken/yasnippet-capf")
  :after cape yasnippet)



(use-package orderless
  :straight t
  :init
  (setq completion-styles '(orderless basic)
	;;completion-category-defaults nil
	completion-category-overrides '((file (styles . (partial-completion)))))
  :config
  (setq orderless-matching-styles '(orderless-flex)))

(defun ox/get-project-root ()
  (when (fboundp 'projectile-project-root)
    (projectile-project-root)))

(use-package consult
  :straight t
  :after which-key
  :demand t
  :bind (("C-s" . consult-line)
	 ("C-M-l" . consult-imenu)
	 ("C-M-j" . persp-switch-to-buffer)
	 ([remap describe-key]      . helpful-key)
	 ([remap describe-command]  . helpful-command)
	 ([remap describe-variable] . helpful-variable)
	 ([remap describe-function] . helpful-callable)
	 :map minibuffer-local-map
	 ("C-r" . consult-history))
  :custom
  (consult-project-root-function #'ox/get-project-root)
  (completion-in-region-function #'consult-completion-in-region)
  :config
  ;; Customizing the find command to exclude git and node_modules folders
  (setq consult-find-args "find . -not ( -path */.git -path */node_modules -prune )")
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  ;; Add preview to consult-find
  (consult-customize consult-find :state (consult--file-preview))
  (ox/leader-keys
    "t" '(:ignore t :which-key "toggles")
    "tt" '(consult-theme :which-key "Load themes"))
  (consult-preview-at-point-mode))

(use-package consult-lsp
  :straight t
  :after (lsp-mode consult))

;; A z like for consult
(use-package consult-dir
  :straight t
  :bind (("C-x C-d" . consult-dir)))
;; Force minibuffer to recognize the new bindings
(add-hook 'minibuffer-setup-hook
          (lambda ()
            (define-key (current-local-map) (kbd "C-x C-j") 'consult-dir-jump-file)
            (define-key (current-local-map) (kbd "C-x C-d") 'consult-dir)))

;; An fzf like for consult (prefer to use consult-find/grep for the moment wait and see)
(use-package affe
  :straight t
  :config
  ;; Manual preview key for `affe-grep'
  (consult-customize affe-grep :preview-key "M-.")
  ;; add preview to and affe-find
  (consult-customize affe-find :state (consult--file-preview)))

;; The default regular expression transformation of Consult is limited. It is recommended to configure Orderless as affe-regexp-compiler in Consult.
(defun affe-orderless-regexp-compiler (input _type _ignorecase)
  (setq input (cdr (orderless-compile input)))
  (cons input (apply-partially #'orderless--highlight input t)))
(setq affe-regexp-compiler #'affe-orderless-regexp-compiler)

(use-package all-the-icons-completion
  :straight t
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
  :config
  ;;(all-the-icons-completion-mode)
  )

(use-package marginalia
  :after vertico
  :straight t
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :init
  (marginalia-mode))



(use-package embark
  :straight t
  :bind (("C-S-a" . embark-act)
	 :map minibuffer-local-map
	 ("C-d" . embark-act))
  :config

  ;; Show Embark actions via which-key
  (setq embark-action-indicator
	(lambda (map)
	  (which-key--show-keymap "Embark" map nil nil 'no-paging)
	  #'which-key--hide-popup-ignore-command)
	embark-become-indicator embark-action-indicator))

(use-package embark-consult
  :straight '(embark-consult :host github
			     :repo "oantolin/embark"
			     :files ("embark-consult.el"))
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . embark-consult-preview-minor-mode))

#+end_src

#+begin_src emacs-lisp
(use-package wgrep
  :straight t) ;; edit grep searches

(use-package harpoon
  :straight t
  :after (general which-key)
  :config
  (ox/leader-keys
    "0" '(harpoon-add-file :whick-key "Add file to Harpoon")
    "1" '(harpoon-go-to-1 :which-key "harpoon file 1")
    "2" '(harpoon-go-to-2 :which-key "harpoon file 2")
    "3" '(harpoon-go-to-3 :which-key "harpoon file 3")
    "4" '(harpoon-go-to-4 :which-key "harpoon file 4")
    "5" '(harpoon-go-to-5 :which-key "harpoon file 5")
    "6" '(harpoon-go-to-6 :which-key "harpoon file 6")
    "7" '(harpoon-go-to-7 :which-key "harpoon file 7")
    "8" '(harpoon-go-to-8 :which-key "harpoon file 8")
    "9" '(harpoon-go-to-9 :which-key "harpoon file 9")))

(use-package hydra
  :straight t
  :after (general which-key)
  :defer t
  :config
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
    (defhydra hydra-split-size (:timeout 4)
    "change splits size"
    ("h" evil-window-decrease-width "decrease-width")
    ("j" evil-window-decrease-height "decrease-height")
    ("l" evil-window-increase-width "increase-width")
    ("k" evil-window-increase-height "increase-width")
    ("f" nil "finished" :exit t))
  (ox/leader-keys
    "h" '(:ignore t :which-key "hydra")
    "hs" '(hydra-text-scale/body :which-key "scale text")
    "hb" '(hydra-split-size/body :which-key "split sizes")
    "ha" '(harpoon-quick-menu-hydra :which-key "harpoon-quick-menu-hyra")
    "hf" '(coc-dc-menu :which-key "coc-damage-calculator")))

(defun kill-current-buffer-without-confirm ()
  "Kill the current buffer without confirmation."
  (interactive)
  (let (kill-buffer-query-functions) ; Disable confirmation
    (kill-buffer (current-buffer))))

(defun switch-to-previous-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))
#+end_src

* Formatting
Apheleia is an Emacs package which solves both of these problems comprehensively for all languages, allowing you to say goodbye to language-specific packages such as Blacken and prettier-js.

To help keeping in the 80 character long for elisp we wrap the code using auto-fill-mode in a hook.
#+begin_src emacs-lisp
;;; APHELEIA
;; auto-format different source code files extremely intelligently
;; https://github.com/radian-software/apheleia
(use-package apheleia
  :straight t
  :diminish ""
  :hook
  ((emacs-lisp-mode . (lambda () (set-fill-column 80)))
   (emacs-lisp-mode . auto-fill-mode))
  :defines
  apheleia-formatters
  apheleia-mode-alist
  :functions
  apheleia-global-mode
  :config
  (setf (alist-get 'prettier-json apheleia-formatters)
        '("prettier" "--stdin-filepath" filepath))
  (add-to-list 'apheleia-mode-alist '(emacs-lisp-mode . lisp-indent))
  (add-to-list 'apheleia-mode-alist '(typescript-ts-mode . prettier))
  (add-to-list 'apheleia-mode-alist '(javascript-ts-mode . prettier))
  (apheleia-global-mode +1))
#+end_src
* Linters
#+begin_src emacs-lisp
(use-package lsp-eslint
  :demand 
  :after lsp-mode)
#+end_src
* Searching
#+begin_src emacs-lisp
(use-package rg
  :straight t
  :config
  ;;(rg-enable-default-bindings)
  (rg-enable-menu)
  )
#+end_src
* Files
#+begin_src emacs-lisp
(defun ox/sudo-find-file (file)
  "Open FILE as root."
  (interactive
   (list (read-file-name "Open as root: ")))
  (find-file (if (file-writable-p file)
                 file
               (concat "/sudo:root@localhost:" file))))
#+end_src
* Help mode enhancement

#+begin_src emacs-lisp
;; Better help view and features
(use-package helpful
  :straight t
  :commands (helpful-callable helpful-variable helpful-command helpful-key))
#+end_src

* Terminals
** Term
#+begin_src emacs-lisp
(use-package term
  :straight t
  :defer 0
  :config
  (setq explicit-shell-file-name "zsh"))
;;(setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
#+end_src
** vterm
#+begin_src emacs-lisp
(use-package vterm
    :straight t
    :defer 0
    :after (general which-key)
    :config
    ;; Remove mappings of alt+numbers from vterm
    (dolist (key '("M-1" "M-2" "M-3" "M-4" "M-5" "M-6" "M-7" "M-8" "M-9" "M-0"))
        (define-key vterm-mode-map (kbd key) nil))
    ;; switch to last buffer to a previous non vterm buffer within a vterm buffer
    (evil-define-key '(visual insert normal)
        vterm-mode-map
        (kbd "C-6")
        (lambda()
            (interactive)
            (switch-to-buffer
                (symbol-value
                    (intern
                        (format "my/last-non-vterm-buffer-on-%s-persp"
                            (safe-persp-name (get-frame-persp))))))))
    
    ;; (evil-define-key '(visual insert normal) vterm-mode-map (kbd "C-{") 'multi-vterm-prev)
    ;; (evil-define-key '(visual insert normal) vterm-mode-map (kbd "C-}") 'multi-vterm-next)

    (setq vterm-max-scrollback 10000)
    (setq term-prompt-regexp "^[^❯\n]*[❯] *"))
;;(setq term-prompt-regexp "^[^❯\n]*[.*❯] .*"))
;;(setq term-prompt-regexp "^[^❯\n]*[❯] *"))
;;(setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
;; :hook (vterm-mode . (lambda ()
;; 			(evil-emacs-state))))
(use-package multi-vterm
    :straight t
    :after vterm
    ;; :after vterm
    ;; :hook (vterm-mode . (lambda ()
    ;; 			(evil-emacs-state))))
    :config
    (ox/leader-keys
        "s" '(:ignore t :which-key "shells")
        "sv" '(multi-vterm :which-key "new multi-vterm buffer")
        "so" '(multi-vterm-dedicated-toggle :which-key "toggle multi-vterm")
        "sp" '(multi-vterm-prev :which-key "multi-vterm prev")
        "sn" '(multi-vterm-next :which-key "multi-vterm next")
        "sd" '(ox/ledeb-vterm :which-key "vterm ledeb")
        "se" '(eshell :whick-key "eshell"))
    (setq multi-vterm-dedicated-window-height-percent 40))
;; (add-hook 'vterm-mode-hook
;;           (lambda ()
;;             (set (make-local-variable 'buffer-face-mode-face) "Ubuntu Mono")
;;                  (buffer-face-mode t)))
#+end_src

** term
#+begin_src emacs-lisp
(if (eq system-type 'gnu/linux)
	(setq explicit-shell-file-name "zsh")
    (setq explicit-shell-file-name "powershell.exe")
    (setq explicit-powershel.exe-args'()))
#+end_src

** Eshell
#+begin_src emacs-lisp
(use-package eshell-git-prompt
  :straight t
  :after eshell)

(defun ox/configure-eshell ()
  ;; Save command history when commands are entered
    (corfu-mode -1)
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
(evil-define-key '(visual insert normal) eshell-mode-map (kbd "C-6") 'evil-switch-to-windows-last-buffer)
  (setq eshell-history-size 10000
	eshell-buffer-maximun-lines 10000
	eshell-hist-ignoredups t
	eshell-scroll-to-bottom-on-input t))

  (add-hook 'eshell-mode-hook 'ox/configure-eshell)
(use-package eshell
  :straight t
  :hook (eshell-first-time-mode . ox/configure-eshell)
  :config
  (eshell-git-prompt-use-theme 'multiline)

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim"))))
#+end_src
* my/get-persp-non-vterm-current-buffer
If we are going back and forth between vterms going back to the previous file is either too long =C-x b= to switch buffer, or broken with evil mode =C-6= as you might going back to a previous vterm buffer instead of the previous file we were editing. it has to be used with persp-mode.

It does work on standalone vterm and with multi-vterm it has to be plugged into a multi-vterm switcher like [[defun My-switch-to-persp-vterm-by-number][here]]

You can then bind a key to access to this stored buffer like [[(evil-define-key '(visual insert normal) vterm-mode-map (kbd "C-6") (lambda() (interactive) (switch-to-buffer (symbol-value][here]]


#+begin_src emacs-lisp
(defun my/get-persp-non-vterm-current-buffer (&rest _)
  "Save the name of the current buffer in the current perspective, but only if the current buffer is not a vterm buffer.
The name of the buffer is stored in a variable named `my/last-non-vterm-buffer-on-<persp>-persp',
where <persp> is the name of the current perspective, with any special characters escaped.
This allows the last non-vterm buffer to be tracked on a per-perspective basis."
  (let ((current-buffer-name (buffer-name (current-buffer))))
      (unless (or (string-match-p "^\\*vterm\\(?:inal<[1-9]>\\)?\\*$" current-buffer-name)
                  (string-match-p "\\*vterminal - dedicated\\*" current-buffer-name))
          (set (intern (format "my/last-non-vterm-buffer-on-%s-persp"
                           (safe-persp-name (get-frame-persp)))) current-buffer-name))))

;; We advice multi-vterm and vterm to save the previous non vterm buffer even if we create new vterms
(advice-add #'multi-vterm :before 'my/get-persp-non-vterm-current-buffer)
(advice-add #'vterm :before 'my/get-persp-non-vterm-current-buffer)
#+end_src
* My-switch-to-persp-vterm-by-number
Creating a function to target a specific vterm buffer inside a specific perspective.
It first parse every buffers in the perspective seeking for vterm buffers only in the good order.
Then it switch to the vterm buffer by it's number.

the loop bind keys to this function.
The current-i variable is a workaround to prevent elisp dynamical scope in the lambda to only catch the i reference and having the correct number to bind by taking the good i value at each iteration of the loop.

As none have every buffers we just switch to the vterm buffer by it's number.

Unbind "*C-\*", then remap toggle-input-method to "*C-|*" so we can allow "*C-\*" as leader key to travel between vterms
#+begin_src emacs-lisp
(global-unset-key (kbd "C-\\"))
(define-key global-map (kbd "C-|") #'toggle-input-method)

(defun my-switch-to-persp-vterm-by-number (number)
  "Target a vterm buffer in persp by NUMBER."
  (interactive "nPress the number key for the persp-vterm: ")
    (my/get-persp-non-vterm-current-buffer)
  (let* ((index 0)
	 (number (1- number))
	 (all-buffers-in-persp (reverse (persp-buffer-list-restricted)))
	 (persp-vterm-buffers (cl-remove-if-not (lambda (buf) (string-match-p "^\\*vterminal<[0-9]+>\\*$" (buffer-name buf))) all-buffers-in-persp)))
    (if persp-vterm-buffers
	(if (get-current-persp)
	    (progn
	      (while (< index number)
		(setq index (+ 1 index)))
	      (if (setq vterm-persp-p (elt persp-vterm-buffers index))
		  (switch-to-buffer vterm-persp-p)))
	  (switch-to-buffer (format "*vterminal<%d>*" (1+ number))))
      (message "No vterm buffer in the perspective")
      )
    ))

(with-eval-after-load 'evil
(let ((i 1))
(while (< i 10)  ;; Loop from 0 to 9
  (let* ((current-i i)
	 (key (format "C-\\ %d" i))
	 (command-name (intern (format "my-persp-vterm-%d" i))))
     (defalias command-name
       (lambda()
		       (interactive)
		       (my-switch-to-persp-vterm-by-number current-i)))
     (keymap-global-set key command-name)
      (evil-define-key '(visual insert normal) vterm-mode-map (kbd key) command-name))
  (setq i (+ i 1)))))
#+end_src
* Evil Mode

Adding [[(define-key evil-motion-state-map (kbd "\\"][\]] as a secondary leader map instead of evil-execute-in-emacs-state

#+begin_src emacs-lisp
;; Dependencies for evil mode undo features
;; (use-package undo-tree
;;   :straight t
;; :init (global-undo-tree-mode)

;; :config
;; ;; Enable undo-tree mode

;; ;; Enable undo history saving
;; (setq undo-tree-auto-save-history t)

;; ;; Set the directory where undo histories will be saved
;; (setq undo-tree-history-directory-alist '(("." . "~/.cache/emacs/undo-history"))))

(use-package undo-fu
  :straight t)
(use-package undo-fu-session
  :straight t
  :init (undo-fu-session-global-mode)
  )
;; For evil g; g, motions and last-change-register "."
(use-package goto-chg
  :straight t)

;;hook to start modes without evil mode
(defun ox/evil-hook ()
  (message "ox/evil-hook was called") ; add this line
  ;; Unbind RET key so emacs can use it instead of evil useful to make
  ;; org-return-follows-link working in evil-mode
  (define-key evil-motion-state-map (kbd "RET") nil) 

  (dolist (mode '(Custom-mode
		  eshell-mode
		  git-rebase-mode
		  erc-mode
		  circe-server-mode
		  circe-chat-mode
		  circe-query-mode
		  sauron-mode
		  vterm-mode
		  term-mode
		  reader-mode
                  magit-status-mode
		  ))
    (add-to-list 'evil-emacs-state-modes mode)))
;;(evil-set-initial-state mode 'emacs)))
(use-package evil
  ;;:straight t
  :straight '(evil :host github
		   :repo "emacs-evil/evil"
		   :branch "master")

  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-undo-system 'undo-fu)
  (setq evil-respect-visual-line-mode t)
  :hook (evil-mode . ox/evil-hook)
  :config
  (evil-set-undo-system 'undo-redo)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'message-buffer-mode 'normal)
  ;;(evil-set-initial-state 'vterm-mode 'emacs)
  (evil-set-initial-state 'dashboard-mode 'normal)
  (evil-set-initial-state 'magit-status-mode 'emacs)

  (defun print-evil-state ()
    "Print the value of evil-emacs-state-modes."
    (interactive)
    (prin1 evil-emacs-state-modes))
  (ox/leader-keys
    "e" '(:ignore t :which-key "Evil")
    "eu" '(evil-collection-unimpaired-move-text-up :which-key "evil move-text-up")
    "ep" '(print-evil-state :which-key "print evil state")
    "ed" '(evil-collection-unimpaired-move-text-down :which-key "evil move-text-down")

    "ew" '(evil-avy-goto-word-1 :which-key "evil-avy-goto-wrord-1")
    "el" '(evil-avy-goto-char-in-line :which-key "evil-avy-goto-char-in-line"))
  (defhydra hydra-move-text (:timeout 4)
    "scale text"
    ("j" evil-collection-unimpaired-move-text-up "Move up")
    ("k" evil-collection-unimpaired-move-text-down "Move down")
    ("f" nil "finished" :exit t))
  (ox/leader-keys
    "h" '(:ignore t :which-key "hydra")
    "hm" '(hydra-move-text/body :which-key "Move text")))

(evil-mode 1)

(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init))

(use-package evil-numbers
  :straight t
  :after evil
  :config
  (general-define-key
   :states 'visual
   "g C-a" 'evil-numbers/inc-at-pt-incremental
   "g C-x" 'evil-numbers/dec-at-pt-incremental)
  (ox/leader-keys
    "i" '(:ignore t :which-key "increment")
    "ia" '(evil-numbers/inc-at-pt :which-key "Imcrement")
    "ix" '(evil-numbers/dec-at-pt :which-key "Decrement")))

(use-package evil-mc
  :straight t
  :config
  (global-evil-mc-mode  1)

  (use-package evil-surround
  :straight '(evil-surround :host github
                   :repo "Roger-Roger-debug/evil-surround"
		   :branch "change-newline")
    ;;:straight t
    :config
    (global-evil-surround-mode 1))


  (defun evil--mc-make-cursor-at-col (_startcol endcol orig-line)
    (move-to-column endcol)
    (unless (= (line-number-at-pos) orig-line)
      (evil-mc-make-cursor-here))
    )
    ;;; During visual selection point has +1 value
  (defun my-evil-mc-make-vertical-cursors (beg end)
    (interactive (list (region-beginning) (- (region-end) 1)))
    (evil-exit-visual-state)
    (evil-mc-pause-cursors)
      ;;; Because `evil-mc-resume-cursors` produces a cursor,
      ;;; we have to skip a current line here to avoid having +1 cursor
    (apply-on-rectangle #'evil--mc-make-cursor-at-col
                        beg end (line-number-at-pos))
    (evil-mc-resume-cursors)
      ;;; Because `evil-mc-resume-cursors` produces a cursor, we need to place it on on the
      ;;; same column as the others
    (move-to-column (evil-mc-column-number end))
    )

  (defun evil-mc-make-vertical-cursors (beg end)
    (interactive (list (region-beginning) (region-end)))
    (evil-mc-pause-cursors)
    (apply-on-rectangle #'evil--mc-make-cursor-at-col
                        beg end (line-number-at-pos (point)))
    (evil-mc-resume-cursors)
    (evil-normal-state)
    (move-to-column (evil-mc-column-number (if (> end beg)
                                               beg
                                             end)))))

;; Create a new keymap for the backslash leader
(define-prefix-command 'my-evil-leader-map)
(define-key evil-motion-state-map (kbd "\\") 'my-evil-leader-map)

;; Bind commands under the new leader key
(define-key my-evil-leader-map (kbd "w") 'evil-write)   ;; Save
(define-key my-evil-leader-map (kbd "d") 'evil-delete-buffer) ;; Kill buffer
(define-key my-evil-leader-map (kbd "b") 'consult-persp-buffer) ;; Switch buffer in persp
(define-key my-evil-leader-map (kbd "c") 'evil-window-delete)  ;; Close window
(define-key my-evil-leader-map (kbd "e") 'evil-execute-in-emacs-state)  ;; Execute next command in emacs state
(define-key my-evil-leader-map (kbd "v") 'evil-window-vsplit)  ;; Split buffer vertically
(define-key my-evil-leader-map (kbd "s") 'evil-window-split)  ;; Split buffer horizontally
(define-key my-evil-leader-map (kbd "l") 'ox/switch-to-last-persp)
(define-key my-evil-leader-map (kbd "p") 'flycheck-previous-error)  ;; Previous error
(define-key my-evil-leader-map (kbd "n") 'flycheck-next-error)  ;; Next error

(define-key my-evil-leader-map (kbd "1") 'evil-avy-goto-char)  ;; Easymotions
(define-key my-evil-leader-map (kbd "2") 'evil-avy-goto-char-2)  ;; Easymotions
(define-key my-evil-leader-map (kbd "3") 'evil-avy-goto-word-1)  ;; Easymotions
(define-key my-evil-leader-map (kbd "x") (lambda () (interactive) (save-buffer) (kill-buffer))) ;; Save and kill buffer

(defun my/evil-next-visual-line (count)
  "Move COUNT screen lines down."
  (interactive "p")
  (if (> count 1) 
      (evil-next-line count)
    (evil-next-visual-line count)))

(defun my/evil-previous-visual-line (count)
  "Move COUNT screen lines up."
  (interactive "p")
  (if (> count 1) 
      (evil-previous-line count)
    (evil-previous-visual-line count)))

(define-key evil-normal-state-map (kbd "j") 'my/evil-next-visual-line)
(define-key evil-normal-state-map (kbd "k") 'my/evil-previous-visual-line)

;; Split buffer horizontally
#+end_src

* Project Management
#+begin_src emacs-lisp
(use-package projectile
  :straight t
  :diminish projectile-mode
  :config (projectile-mode)
  :custom((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c k" . projectile-command-map)
  :init
  (when (file-directory-p my-project-path)
    (setq projectile-project-search-path `(,my-project-path)))
  (setq projectile-switch-projection-action #'projectile-dired))


#+end_src

* Languages modes

#+begin_src emacs-lisp
(defun my/crunner ()
  "Make and Run a C program on a vterm buffer based on the makefile recipies
because compile mode is too slow"
  (interactive)
  (if (or
	  (eq major-mode 'c-ts-mode)
	  (eq major-mode 'c++-ts-mode))
      (progn 
	(save-buffer)
	(let ((target (concat "make && time " "./" (file-name-nondirectory (directory-file-name (file-name-directory buffer-file-name))) "\n"))
	      (switched nil))
	  (setq switched (switch-to-last-persp-vterm))
	  (unless (not (eq switched nil))
	    (multi-vterm))
	  (vterm-send-string target)))
    (print "Not in c-mode")))
(ox/leader-keys
  "cv" '(my/crunner :which-key "Run C code in VTerm"))

;;(add-hook 'after-save-hook 'my/crunner)

(use-package eros
  :straight t
  :init
  (eros-mode 1))

(use-package nvm
  :straight t
  :defer t)

(use-package caddyfile-mode
  :straight t
  :mode (("Caddyfile\\'" . caddyfile-mode)
         ("caddy\\.conf\\'" . caddyfile-mode)))

(use-package lua-mode
  :straight t
  :mode "\\.lua\\'")

(use-package nix-mode
  :straight t
  ;; :mode "\\.nix\\'"
  )
(use-package nix-ts-mode
  :straight t
 :mode "\\.nix\\'")

(use-package php-ts-mode
  :straight (:host github
                   :repo "emacs-php/php-ts-mode"))

(use-package typescript-ts-mode
  :mode "\\.ts\\'"
  ;;:dash "TypeScript"
  ;;:config
  ;;(setq typescript-indent-level 2)
  )

(use-package js-ts-mode
  :mode "\\.js\\'")
(use-package html-mode
  :mode "\\.html\\'")

(use-package kotlin-ts-mode
  :straight (:host gitlab :repo "bricka/emacs-kotlin-ts-mode")
  :mode "\\.kt\\'")


(use-package yaml-ts-mode
  :mode "\\.yaml\\'")

(use-package dockerfile-ts-mode
  :mode "docker-compose.yaml Dockerfile")

(use-package prisma-mode
  :straight (:host github
		   :repo "pimeys/emacs-prisma-mode"
		   :branc "main")
  )
(use-package emmet-mode
  :disabled
  :straight t
  :hook ((typescript-ts-mode . emmet-mode))
  ;;(typescript-mode . emmet-preview-mode)))
  :config
  (ox/leader-keys
    "te" '(emmet-preview-mode :which-key "Emmet Preview Mode")))
;; (add-to-list 'emmet-jsx-major-modes tsx-ts-mode)
;; (add-to-list 'emmet-jsx-major-modes js2-jsx-mode))

(use-package deno-bridge
  :disabled
  :straight (:type git :host github :repo "manateelazycat/deno-bridge")
  :init
  (use-package websocket :disabled :straight t))

(use-package emmet2-mode
  :disabled
  :straight (:type git :host github :repo "p233/emmet2-mode" :files (:defaults "*.ts" "src" "data"))
  :after deno-bridge
  :hook ((web-mode css-mode typescript-ts-mode) . emmet2-mode)                     ;; Enable emmet2-mode for web-mode and css-mode and other major modes based on them, such as the build-in scss-mode
  :config                                                       ;; OPTIONAL
  (unbind-key "C-j" emmet2-mode-map)                            ;; Unbind the default expand key
  (define-key emmet2-mode-map (kbd "C-c C-.") 'emmet2-expand))  ;; Bind custom expand key

;; Hide corfu suggestions and disable it when emmet-mode preview is working
(defun my-emmet-input-watcher (symbol newval operation where)
  (when (eq symbol 'emmet-preview-input)
    (if newval
        (progn
          (corfu-mode -1)
          (corfu-quit))
      (corfu-mode 1))))

(add-variable-watcher 'emmet-preview-input #'my-emmet-input-watcher)


;; Run code formatter on buffer contents without moving point, using RCS patches and dynamic programming. 
;; (use-package apheleia
;;   :straight t
;;   :config
;;   (apheleia-global-mode +1))

;; (use-package rust-mode
;;   :straight t
;;   :mode "\\.rs\\'"
;;   :init (setq rust-format-on-save t))
(use-package rust-ts-mode
  :init
  (setq rust-mode-treesitter-derive t) ;; Needed for rustic
  :mode "\\.rs\\'")

(use-package cargo
  :straight t
  :defer t)

(use-package rustic
  :ensure t
  :after rust-ts-mode
  :hook ((rustic-popup-mode . my-set-evil-state-in-rustic-popup-mode)
         (rustic-mode . rustic-mode-auto-save-hook))
  :config
  (setq rustic-format-on-save nil)
  (defun my-set-evil-state-in-rustic-popup-mode ()
  "Switch to evil-emacs-state in rustic-popu-mode."
      (evil-emacs-state))
  (defun rustic-mode-auto-save-hook ()
  "Enable auto-saving in rustic-mode buffers."
  (when buffer-file-name
    (setq-local compilation-ask-about-save nil)))
  :custom
  (rustic-cargo-use-last-stored-arguments t))
;; (add-hook 'rustic-popup-mode-hook 'my-set-evil-state-in-rustic-popup-mode)

(use-package flycheck-rust
  :straight t
  :hook (flycheck-mode . flycheck-rust-setup))

(use-package web-mode
  :straight t
  :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
  :config
  ;; (setq-default web-mode-code-indent-offset 2)
  ;; (setq-default web-mode-markup-indent-offset 2)
  ;; (setq-default web-mode-attribute-indent-offset 2)
  )

(use-package auto-rename-tag
  :straight t
  :hook ((typescript-ts-mode . auto-rename-tag-mode)
         (js-ts-mode . auto-rename-tag-mode)
         (mhtml-mode . auto-rename-tag-mode)
         (web-mode . auto-rename-tag-mode)))

;; 1. Start the server with `httpd-start'
;; 2. Use `impatient-mode' on any buffer
(use-package impatient-mode
  :straight t)

;; Provides live interaction with JavaScript, CSS, and HTML in a web browser. Expressions are sent on-the-fly from an editing buffer to be evaluated in the browser, just like Emacs does with an inferior Lisp process in Lisp modes.
(use-package skewer-mode
  :straight t)
#+end_src

* Smart parens
#+begin_src emacs-lisp
(use-package smartparens
  :straight t
  :hook (prog-mode . smartparens-mode)
  :config(require 'smartparens-config)
;; add a blank line when opening a {
  (sp-with-modes
      '(c++-mode objc-mode c-mode typescript-ts-mode typescript-mode lua-mode)
    (sp-local-pair "{" nil :post-handlers '(:add ("||\n[i]" "RET")))))
#+end_src
* Syntax Checking
#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  ;; :after lsp-mode
  :config
  (setq flycheck-emacs-lisp-load-path 'inherit)
  :init (global-flycheck-mode))
(use-package consult-flycheck
  :straight t
  :general (:states '(normal visual)
		    :keymaps 'prog-mode-map
		    "SPC fl" 'consult-flycheck))
#+end_src
* Language Servers
[[https://github.com/blahgeek/emacs-lsp-booster][emacs-lsp-booster]] increase performance by providing a wrapper-executable around lsp-programs.

[[(setq lsp-completion-enable nil][lsp-completion-enable]] is set to nil because lsp completions are added manually in a cape hook [[(defun +cape-capf-hook(][Here]]

[[https://github.com/aca/emmet-ls][emmet-ls]] server did not disabled ResolveProvider as suggested in this [[https://github.com/aca/emmet-ls/pull/67/files][PR]] I did it my self on my local installation of emmet-ls in the [[file:/usr/local/lib/node_modules/emmet-ls/out/server.js][server.js]] to solve:

*Error processing message (error "Unhandled method completionItem/resolve")*

#+begin_src emacs-lisp
(defun ox/lsp-mode-setup ()
  (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  (lsp-headerline-breadcrumb-mode))

;; (use-package lsp-tailwindcss
;;  :straight '(lsp-tailwindcss :type git :host github :repo "merrickluo/lsp-tailwindcss"))
(use-package lsp-mode
  :straight t
  :preface
  (defun lsp-booster--advice-json-parse (old-fn &rest args)
    "Try to parse bytecode instead of json."
    (or
     (when (equal (following-char) ?#)

       (let ((bytecode (read (current-buffer))))
         (when (byte-code-function-p bytecode)
           (funcall bytecode))))
     (apply old-fn args)))
  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD."
    (let ((orig-result (funcall old-fn cmd test?)))
      (if (and (not test?)                             ;; for check lsp-server-present?
               (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
               lsp-use-plists
               (not (functionp 'json-rpc-connection))  ;; native json-rpc
               (executable-find "emacs-lsp-booster"))
          (progn
            (message "Using emacs-lsp-booster for %s!" orig-result)
            (cons "emacs-lsp-booster" orig-result))
        orig-result)))
  :init
  (setq lsp-use-plists t)
  ;; Initiate https://github.com/blahgeek/emacs-lsp-booster for performance
  (advice-add (if (progn (require 'json)
                         (fboundp 'json-parse-buffer))
                  'json-parse-buffer
                'json-read)
              :around
              #'lsp-booster--advice-json-parse)
  (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
  :hook
  ((lsp-mode . ox/lsp-mode-setup)
   (c-ts-mode . lsp-deferred)
   (c++-ts-mode . lsp-deferred)
   (lua-mode . lsp-deferred)
   (kotlin-ts-mode . lsp-deferred)
   (dockerfile-ts-mode . lsp-deferred)
   (yaml-ts-mode . lsp-deferred)
   (typescript-ts-mode . lsp-deferred)
   (css-ts-mode . lsp-deferred)
   (html-mode . lsp-deferred)
   (nix-ts-mode . lsp-deferred)
   ;; (rust-ts-mode . lsp-deferred)
   (js-ts-mode . lsp-deferred))
  :init
  (setq lsp-keymap-prefix "C-c C-l")
  (define-key lsp-mode-map (kbd "C-c C-l") lsp-command-map)
  :config
  (setq lsp-clients-kotlin-server-executable "~/builds/kotlin-language-server/server/build/install/server/bin/kotlin-language-server")
  (setq lsp-completion-enable nil)
  (setq lsp-rust-server 'rust-analyzer) ; or 'rls

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; (setq lsp-clients-angular-language-server-command					   ;;
  ;; '("node"										   ;;
  ;;   "/home/oxhart/.nvm/versions/node/v22.0.0/lib/node_modules/@angular/language-server" ;;
  ;;   "--ngProbeLocations"								   ;;
  ;;   "/home/oxhart/.nvm/versions/node/v22.0.0/lib/node_modules"			   ;;
  ;;   "--tsProbeLocations"								   ;;
  ;;   "/home/oxhart/.nvm/versions/node/v22.0.0/lib/node_modules"			   ;;
  ;;   "--stdio"))									   ;;
  ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (use-package lsp-pyright
    :straight t
    :custom
    (lsp-pyright-langserver-command "pyright") ;; or basedpyright
    (setq lsp-pyright-multi-root nil) ;; disable multi-root
    :hook (python-ts-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp-deferred)
			    ;; enable python pyright flycheck
			   (flycheck-add-next-checker 'lsp 'python-pyright))))
  (setq lsp-clients-angular-language-server-command
	'("node"
	  "/usr/local/lib/node_modules/@angular/language-server"
	  "--ngProbeLocations"
	  "/usr/local/lib/node_modules"
	  "--tsProbeLocations"
	  "/usr/local/lib/node_modules"
	  "--stdio"))

  ;; Configure Emmet LSP
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "emmet-ls" "--stdio")
                    :major-modes '(typescript-ts-mode js-ts-mode html-mode css-ts-mode)
                    :server-id 'emmet-ls))

  (setq lsp-emmet-show-expanded-abbreviation t) ;; Show the expanded abbreviation in completion.
  (setq lsp-emmet-show-abbreviation-as-suggestion t) ;; Show abbreviation as suggestion.

  ;; Configure TailwindCSS Intellisense
  ;; (lsp-register-client
  ;;  (make-lsp-client :new-connection (lsp-stdio-connection "tailwindcss-intellisense" "--stdio")
  ;;                   :major-modes '(typescript-mode html-mode css-mode)
  ;;                   :server-id 'tailwindcss))
  ;; Use lsp-mode everywhere possible
  (setq lsp-auto-guess-root t)

  (lsp-enable-which-key-integration t)
  ;; The path to lsp-mode needs to be added to load-path as well as the
  ;; path to the `clients' subdirectory.
  (add-to-list 'load-path (expand-file-name "lib/lsp-mode" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "lib/lsp-mode/clients" user-emacs-directory))
  :commands (lsp lsp-deferred))

(ox/leader-keys
  "l"  '(:ignore t :which-key "lsp")
  "ld" 'xref-find-definitions
  "lr" 'xref-find-references
  "ln" 'lsp-ui-find-next-reference
  "lp" 'lsp-ui-find-prev-reference
  ;;"ls" 'counsel-imenu
  "ls" 'consult-lsp-diagnostics
  "le" 'lsp-ui-flycheck-list
  "lS" 'lsp-ui-sideline-mode
  "lX" 'lsp-execute-code-action
  "lg"  '(:ignore t :which-key "find")
  "lgr" 'lsp-find-references
  "lgg" 'lsp-find-definition
  "lge" 'lsp-treemacs-errors-list
  "lgq" 'lsp-treemacs-quickfix-list
  "lf" '(:ignore t :which-key "format")
  "l==" 'lsp-format-buffer
  "l=r" 'lsp-format-region
  )
(use-package lsp-ui
  :straight t
  :after lsp-mode
  ;;:commands lsp-ivy-workspace-symbol
  :hook (lsp-mode . lsp-ui-mode)
  ;;:custom(lsp-ui-doc-position 'bottom)
  :config
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-use-childframe t
        lsp-ui-doc-position 'top
        lsp-ui-doc-include-signature t
        lsp-ui-sideline-enable t
        lsp-ui-flycheck-enable t
        lsp-ui-sideline-ignore-duplicate t))

(use-package lsp-treemacs
  :straight t
  :after lsp-mode
  :commands lsp-treemacs-errors-list
  :config
  (lsp-treemacs-sync-mode t))
(use-package treemacs-evil
  :straight t
  :after lsp-treemacs)
(use-package treemacs-projectile
  :straight t
  :after lsp-treemacs)

#+end_src

* Dap mode
#+begin_src emacs-lisp
;; (use-package dap-mode
;;   :straight t
;;   :custom
;;   (lsp-enable-dap-auto-configure nil)
;;   :config
;;   (dap-ui-mode 1)
;;   (dap-tooltip-mode 1)
;;   (require 'dap-node)
;;   (dap-node-setup))
#+end_src
* auth-source
#+begin_src emacs-lisp
(let* ((auth (auth-source-search :host "api.github.com" :user "S0mbr3^forge"))
       (token (funcall (plist-get (car auth) :secret))))
  ;; Now 'token' contains your GitHub token, and you can use it in your code.
  )

(setenv "GPG_TTY" (format "%d" (string-to-number (shell-command-to-string "tty --file=/dev/tty"))))
;; (require 'epg)
;; (require 'auth-source-pass)
;; (auth-source-pass-enable)

;; (setq epg-pinentry-mode 'loopback) ;;Getting prompted the gpg password in minibuffer instead of external
;; (pinentry-start)
#+end_src
* Magit
#+begin_src emacs-lisp
;; We are making magit getting the full buffer size
(use-package magit
  :straight t
  :commands magit-status
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

;; Allow to work with forges to get informations about repositories (notifications, issues, pull requests etc)
(use-package forge
:straight t
:after magit)

(defun my/vc-refresh-after-burying-magit (&rest args)
  "Refresh VC state after magit-status."
  (vc-refresh-state))

(defun my/vc-refresh-after-magit-checkout (&rest args)
  "Refresh VC state after magit-status."
  (vc-refresh-state))

 (advice-add 'magit-branch-and-checkout :after #'my/vc-refresh-after-magit-checkout)
 (advice-add 'magit-branch :after #'my/vc-refresh-after-magit-checkout)
 (advice-add 'magit-checkout :after #'my/vc-refresh-after-magit-checkout)
 (advice-add 'magit-refresh :after #'my/vc-refresh-after-magit-checkout)
(advice-add 'magit-mode-bury-buffer :after #'my/vc-refresh-after-burying-magit)


;;(add-hook 'magit-post-refresh-hook 'vc-refresh-state)

;; (defun refresh-vc-state (&rest r) (message "%S" (current-buffer))(vc-refresh-state))
;; (advice-add 'magit-checkout-revision :after 'refresh-vc-state '((name . "magit-refresh-on-checkout-revision")))
;; (advice-add 'magit-branch-create :after 'refresh-vc-state '((name . "magit-refresh-on-branch-create")))
;; (advice-add 'magit-branch-and-checkout :after 'refresh-vc-state '((name .  "magit-refresh-on-checkout-and-branch")))
;; (advice-add 'magit-branch-or-checkout :after 'refresh-vc-state '((name .  "magit-refresh-on-branch-or-checkout")))

;; (defun my/vc-refresh-state-after-shell-command (output)
;;   (when (string-match "Switched to branch" output)
;;     (vc-refresh-state)))

;; (add-hook 'comint-output-filter-functions 'my/vc-refresh-state-after-shell-command)



#+end_src
* Org mode
** Org configuration
#+begin_src emacs-lisp
(defun ox/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))


(defun ox/after-org-capture (&rest r)
  (delete-other-windows))

(use-package org
  :straight t
  ;;:ensure nil
  ;;:pin org
  :commands (org-capture org-agenda)
  :hook ((org-mode . ox/org-mode-setup)
	 (org-mode . ox/org-mode-init)
	 (org-mode . (lambda()
		       (set-face-attribute 'org-table nil :inherit 'fixed-pitch)))
	 (org-mode . (lambda () (org-superstar-mode 0))))
  :config
  ;; This advice allow to open capture template in full window size instead of split
  (advice-add #'org-capture-place-template :after 'ox/after-org-capture)
  ;; same buf for editing src code blocks in org file
  (advice-add #'org-edit-special :after 'ox/after-org-capture)

  (message "hi from org-mode")
  (setq org-ellipsis " ↲"
	org-hide-emphasis-markers t
	org-pretty-entities t
	org-startup-with-inline-images t
	org-agenda-time-grid
	'((daily today require-timed)
	  (800 1000 1200 1400 1600 1800 2000)
	  " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
	org-agenda-current-time-string
	"◀── now ─────────────────────────────────────────────────")

  (setq org-link-search-must-match-exact-headline nil) ;; Allow fuzzy search while using links
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-agenda-files my-org-files)
  (setq org-src-tab-acts-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-edit-src-content-indentation 0)
  (setq org-startup-with-latex-preview t) ;; Preview of latex symbols
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0)) ;; Change latex symbols size

  (setq org-image-actual-width nil) ;; Allowing to resize images in org files

  (setq org-latex-compiler "lualatex") ;; Compile pdfwith lualatex instead of pdflatex
  (setq org-preview-latex-default-process 'dvisvgm) ;; using svg instead of dvipng for formula and graphics
  (setq org-preview-latex-process-alist
	'((dvisvgm :programs ("lualatex" "dvisvgm")
		   :description "dvi > svg"
		   :message "you need to install the programs: lualatex and dvisvgm."
		   :image-size-adjust (1.7 . 1.5)
                   :image-input-type "dvi"
                   :image-output-type "svg"
                   :latex-compiler ("lualatex -output-format=dvi -interaction nonstopmode -output-directory %o %f")
		   :image-converter
		   ("dvisvgm %f --no-fonts --exact-bbox --scale=%S --output=%O"))))
(setq org-format-latex-header
      (concat org-format-latex-header "\n\\usepackage{tikz}")) ;; adding tikz package to latex header

 ;; Open PDF files links in org-mode inside emacs instead of an external tool
(push '("\\.pdf\\'" . emacs) org-file-apps)
  (setq org-return-follows-link t) ;; Allow to follow links using RET key
  (setq org-link-frame-setup
        '((vm . vm-visit-folder-other-frame)
          (vm-imap . vm-visit-imap-folder-other-frame)
          (gnus . org-gnus-no-new-news)
          (file . find-file)
          (wl . wl-other-frame)))


  ;;(setq python-indent-offset 4) ; Set indentation to 4 spaces (or any other desired value)


  (require 'org-indent)
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)

  ;; Uncheck all checkboxes in a habit entry when it's marked DONE
  (defun my/org-uncheck-checkboxes-in-habit ()
  "Uncheck all checkboxes in a habit entry when it's marked DONE."
  (when (and (string= org-state "DONE")
             (org-entry-get nil "STYLE")
             (string= (org-entry-get nil "STYLE") "habit"))
    (save-excursion
      (org-back-to-heading t)
      (let ((end (save-excursion (org-end-of-subtree t t))))
        (while (re-search-forward "^\\s-*\\([-+*]\\) \\[\\([Xx]\\|[-]\\)\\] " end t)
          (replace-match (concat (match-string 1) " [ ] ") nil nil))))))
  
(add-hook 'org-after-todo-state-change-hook #'my/org-uncheck-checkboxes-in-habit)

  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	  (sequence "TODO(t)" "HABIT(h)" "|" "DONE(d!)")
	  (sequence "BUYING(b1)" "|" "bought(B!)")
	  (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")
	  (sequence "A-PLAN()" "A-READY()" "A-ACTIVE()" "A-REVIEW()" "A-WAIT(@/!)" "A-HOLD()" "|" "A-COMPLETED(c)" "A-CANC(k@)")))

  (setq org-refile-targets
	'(("Archive.org" :maxlevel . 1)
	  ("Tasks.org" :maxlevel . 1)))

  ;; Save Org buffers after refiling!
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-tag-alist
	'((:startgroup)
					; Put mutually exclusive tags here
	  (:endgroup)
	  ("@errand" . ?E)
	  ("@home" . ?H)
	  ("@work" . ?W)
	  ("@learn" . ?L)
	  ("@math" . ?m)
	  ("@roam" . ?r)
	  ("@config" . ?c)
	  ("@wsl-configs" . ?w)
	  ("agenda" . ?a)
	  ("@aude" . ?A)
	  ("planning" . ?p)
	  ("publish" . ?P)
	  ("batch" . ?b)
	  ("note" . ?n)
	  ("idea" . ?i)))

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
	'(("d" "Dashboard"
	   ((agenda "" ((org-deadline-warning-days 7)))
	    (todo "NEXT"
		  ((org-agenda-overriding-header "Next Tasks")))
	    (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	  ("h" "Habit Tasks"
	   ((todo "HABIT"
		  ((org-agenda-overriding-header "Habit Tasks")))))

	  ("n" "Next Tasks"
	   ((todo "NEXT"
		  ((org-agenda-overriding-header "Next Tasks")))))

	  ("b" "Shopping Tasks"
	   ((todo "BUYING"
		  ((org-agenda-overriding-header "Shopping Tasks")))))

	  ("W" "Work Tasks" tags-todo "+work-email")

	  ;; Low-effort next actions
	  ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	   ((org-agenda-overriding-header "Low Effort Tasks")
	    (org-agenda-max-todos 20)
	    (org-agenda-files org-agenda-files)))

	  ("w" "Workflow Status"
	   ((todo "WAIT"
		  ((org-agenda-overriding-header "Waiting on External")
		   (org-agenda-files org-agenda-files)))
	    (todo "REVIEW"
		  ((org-agenda-overriding-header "In Review")
		   (org-agenda-files org-agenda-files)))
	    (todo "PLAN"
		  ((org-agenda-overriding-header "In Planning")
		   (org-agenda-todo-list-sublevels nil)
		   (org-agenda-files org-agenda-files)))
	    (todo "BACKLOG"
		  ((org-agenda-overriding-header "Project Backlog")
		   (org-agenda-todo-list-sublevels nil)
		   (org-agenda-files org-agenda-files)))
	    (todo "READY"
		  ((org-agenda-overriding-header "Ready for Work")
		   (org-agenda-files org-agenda-files)))
	    (todo "ACTIVE"
		  ((org-agenda-overriding-header "Active Projects")
		   (org-agenda-files org-agenda-files)))
	    (todo "COMPLETED"
		  ((org-agenda-overriding-header "Completed Projects")
		   (org-agenda-files org-agenda-files)))
	    (todo "CANC"
		  ((org-agenda-overriding-header "Cancelled Projects")
		   (org-agenda-files org-agenda-files)))))

	  ("v" "Activities Status"
	   ((todo "A-WAIT"
		  ((org-agenda-overriding-header "Waiting on External")
		   (org-agenda-files org-agenda-files)))
	    (todo "A-REVIEW"
		  ((org-agenda-overriding-header "In Review")
		   (org-agenda-files org-agenda-files)))
	    (todo "A-PLAN"
		  ((org-agenda-overriding-header "In Planning")
		   (org-agenda-todo-list-sublevels nil)
		   (org-agenda-files org-agenda-files)))
	    (todo "A-READY"
		  ((org-agenda-overriding-header "Ready to Go")
		   (org-agenda-files org-agenda-files)))
	    (todo "A-ACTIVE"
		  ((org-agenda-overriding-header "Active Activities")
		   (org-agenda-files org-agenda-files)))
	    (todo "A-COMPLETED"
		  ((org-agenda-overriding-header "Completed Activities")
		   (org-agenda-files org-agenda-files)))
	    (todo "A-CANC"
		  ((org-agenda-overriding-header "Cancelled Activities")
		   (org-agenda-files org-agenda-files)))))))

  (setq org-capture-templates
	`(("t" "Tasks / Projects")
	  ("tc" "Task" entry (file+olp ,(expand-file-name "org-files/Tasks.org"  my-org-directory) "Inbox")
	   "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
	  ("tt" "Task" entry (file+olp ,(expand-file-name "org-files/Tasks.org"  my-org-directory) "Inbox")
	   "* TODO %?\n  %U\n  %i" :empty-lines 1)

	  ("s" "Shopping / Projects")
	  ("ss" "Shop" entry (file+olp ,(expand-file-name "org-files/Shopping.org"  my-org-directory) "Inbox")
	   "* BUYING %?\n  %U\n  %a\n  %i" :empty-lines 1)

	  ("j" "Journal Entries")
	  ("jj" "Journal" entry
	   (file+olp+datetree ,(expand-file-name "org-files/Journal.org" my-org-directory) )
	   "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	   ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
	   :clock-in :clock-resume
	   :empty-lines 1)
	  ("jm" "Meeting" entry
	   (file+olp+datetree ,(expand-file-name "org-files/Journal.org" my-org-directory) )
	   "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
	   :clock-in :clock-resume
	   :empty-lines 1)

	  ("jc" "Journal" entry
	   (file+olp+datetree ,(expand-file-name "org-files/Journal.org" my-org-directory) )
	   "\n* %<%I:%M %p> - Journal :journal:\n%a\n%?\n\n"
	   ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
	   :clock-in :clock-resume
	   :empty-lines 1)

	  ("w" "Workflows")
	  ("we" "Checking Email" entry (file+olp+datetree ,(expand-file-name "org-files/Journal.org" my-org-directory) )
	   "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

	  ("v" "Activities")
	  ("va" "Activities idea" entry (file+olp+datetree ,(expand-file-name "org-files/Journal.org" my-org-directory) )
	   "* A-PLAN %? :activities:" :clock-in :clock-resume :empty-lines 1)

	  ("m" "Metrics Capture")
	  ("mw" "Weight" table-line (file+headline ,(expand-file-name "org-files/Metrics.org" my-org-directory) "Weight")
	   "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

  (define-key global-map (kbd "C-c j")
	      (lambda () (interactive) (org-capture nil "jj")))
  (ox/leader-keys
    "o" '(:ignore t :which-key "org")
    "oa" '(org-agenda :which-key "open org-agenda")
    "ot" '(org-todo-list :which-key "open all todo lists")
    "oc" '(org-capture :which-key "open org-capture")
    "oi" '(org-id-get-create :which-key "crate an ID for the current entry")
    "os" '(org-capture-string :which-key "open org-capture-string")
    "oh" '((lambda () (interactive) (find-file (format "%s/org-files/Habits.org" my-org-directory))) :which-key "Open Habits.org")
    "ow" '((lambda () (interactive) (find-file (format "%s/org-files/Metrics.org" my-org-directory))) :which-key "Open Metrics.org")))


;; Center the text, and set a max column width to go next line in org mode
(defun ox/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
	visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :straight t
  :hook (org-mode . ox/org-mode-visual-fill))
#+end_src
** Org Superstar
#+begin_src emacs-lisp
  (use-package org-superstar
    :straight t
    :after org
    :config
    ;;(setq org-superstar-hide-leading-stars t)
    (setq org-superstar-leading-bullet " ")
    ;; Hide away leading stars on terminal.
    (setq org-superstar-leading-fallback ?\s))
#+end_src

** Org Modern
#+begin_src emacs-lisp
(use-package org-modern
  :straight t
  ;;:disabled t
:config
(with-eval-after-load 'org (global-org-modern-mode)))
#+end_src
** Configure babel languages

#+begin_src emacs-lisp
(use-package ob-typescript
  :straight t)

(use-package ob-yaml
  :straight (ob-yaml :type git :host github :repo "llhotka/ob-yaml"))

(use-package ob-php
  :straight (ob-php :type git :host github :repo "twlz0ne/ob-php"))

(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t)
     (makefile . t)
     (shell . t)
     (latex . t)
     (typescript . t)
     (yaml . t)
     (php . t)
     (gnuplot .t )
     (python . t)))
  (setq org-confirm-babel-evaluate nil)
  (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

** Create Structure Templates For Src Blocks

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell :results output"))
  (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
  (add-to-list 'org-structure-template-alist '("rs" . "src rust"))
  (add-to-list 'org-structure-template-alist '("yaml" . "src yaml-ts"))
  (add-to-list 'org-structure-template-alist '("php" . "src php-ts"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("cc" . "src C"))
  (add-to-list 'org-src-lang-modes '("yaml" . yaml-ts)) ;; Changing mode for org-edit-special C-c '
  )
#+end_src

** Auto-tangle Configuration Files
#+begin_src emacs-lisp
;; Automatically tangle our Emacs.org config file when we save it
;; (defun ox/org-babel-tangle-config ()
;;   (when (string-equal (buffer-file-name)
;; 		      (expand-file-name "~/terminalConfigs/.dotfiles/emacs/.emacs.d/orgFiles/Emacs.org"))
;;     ;; Dynamic scoping to the rescue
;;     (let ((org-confirm-babel-evaluate nil))
;;       (org-babel-tangle))))

;;     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'ox/org-babel-tangle-config)))




(defun ox/org-buffer-property (name)
  "Get the value of a buffer-wide Org property NAME."
  (save-excursion
    (goto-char (point-min))
    (if (re-search-forward (concat "^#\\+PROPERTY:.*" name " +\\(.*\\)") nil t)
        (progn
          (message "Found property %s with value %s" name (match-string 1))
          (match-string 1))
      (message "Property %s not found" name)
      nil)))

(defun ox/org-babel-tangle-config ()
  "Automatically tangle Org files with the :auto-tangle property set to t."
  (message "Running ox/org-babel-tangle-config")
  (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle)))

(defun ox/check-and-add-tangle-hook ()
  "Check for the auto-tangle property and add tangle hook if needed."
  (message "Checking for auto-tangle property...")
  (let ((auto-tangle (ox/org-buffer-property ":auto-tangle")))
    (if (and auto-tangle (string= auto-tangle "t"))
        (progn
          (message "Auto-tangle property found. Adding after-save-hook...")
          (add-hook 'after-save-hook #'ox/org-babel-tangle-config nil 'local))
      (message "Auto-tangle property not set to t"))))

(defun ox/org-mode-init ()
  "Initialize Org mode with tangle hook check."
  (message "Initializing Org mode...")
  (ox/check-and-add-tangle-hook))
#+end_src

** Org-fc
Allow to create flashcards for the space repetition learning method (Leitner system).
#+begin_src emacs-lisp
(use-package org-fc
  :straight t
  :after org
  ;; :hook ((org-fc-review-flip-mode org-fc-review-rate-mode) . my-check-org-fc-and-set-evil-state )
  :config
  (setq org-fc-directories (list (format "%s/org-files" my-org-directory)))
  (with-eval-after-load 'org
    (define-key org-mode-map (kbd "C-c f") 'org-fc-hydra/body))
  (require 'org-fc-hydra))

(defun my-check-org-fc-and-set-evil-state ()
  "Switch to evil-emacs-state if org-fc-mode is active."
  (if (or org-fc-review-flip-mode org-fc-review-rate-mode)
      (evil-emacs-state)
    (evil-normal-state)))

(add-hook 'org-fc-review-flip-mode-hook 'my-check-org-fc-and-set-evil-state)
(add-hook 'org-fc-review-rate-mode-hook 'my-check-org-fc-and-set-evil-state)
#+end_src
** Org-transclusion
Show org file contents into others org files.
Actually using it to display zettels from org-roam to org-fc flashcards without clicking on links
#+begin_src emacs-lisp
(use-package org-transclusion
  :straight t
  :after org
  :config
  (setq org-transclusion-add-all-on-activate t
  org-transclusion-exclude-elements '(property-drawer keyword)))

(defun my-disable-transclusion-mode ()
  (when org-transclusion-mode
    (org-transclusion-mode -1)))

(defun my-enable-transclusion-mode ()
  (unless org-transclusion-mode
    (org-transclusion-mode 1)))

(defun my/org-fc-safe-wrapper (orig-fn &rest args)
  (my-disable-transclusion-mode)
  (unwind-protect
      (apply orig-fn args)
    (my-enable-transclusion-mode)))

(when (featurep 'org-transclusion)
  (advice-add 'org-fc-review-rate-easy :around #'my/org-fc-safe-wrapper)
  (advice-add 'org-fc-review-rate-good :around #'my/org-fc-safe-wrapper)
  (advice-add 'org-fc-review-rate-again :around #'my/org-fc-safe-wrapper)
  (advice-add 'org-fc-review-rate-hard :around #'my/org-fc-safe-wrapper))

(add-hook 'org-mode-hook  #'(lambda() (org-transclusion-mode)))
#+end_src
** org-toc
toc-org helps you to have an up-to-date table of contents in org files without exporting (useful primarily for readme files on GitHub).
#+begin_src emacs-lisp
(use-package toc-org
  :straight t
  :init
  (if (require 'toc-org nil t)
    (progn
      (add-hook 'org-mode-hook 'toc-org-mode)

      ;; enable in markdown, too
      (add-hook 'markdown-mode-hook 'toc-org-mode)
      (define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point))
  (warn "toc-org not found"))
  :config
(add-to-list 'org-tag-alist '("TOC" . ?T)))
#+end_src
** org-appear
#+begin_src emacs-lisp
(use-package org-appear
  :straight t)
#+end_src
** org-download
This extension facilitates moving images from point A to point B.
[[https://github.com/abo-abo/org-download][org-download]]
#+begin_src emacs-lisp
(use-package org-download
  :straight t
  :after org
  :config
  (require 'org-download)
  ;; Drag and drop to Dired
  (add-hook 'dired-mode-hook 'org-download-enable)
  (setq org-download-method 'directory)
  (setq-default org-download-image-dir "./img")
  (setq org-download-screenshot-method "screencapture -i %s"))
#+end_src
Make invisible parts of Org elements appear visible.
* Org Roam
#+begin_src emacs-lisp
(use-package org-roam
  :straight t
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert)
	 :map org-mode-map
	 ("C-M-I" . completion-at-point))
  :config
   ;;(org-roam-db-autosync-mode)
  ;; Allow to show the org-roam filetags in the minibuffer alongside the title
  (setq org-roam-node-display-template 
      (concat "${title:*} " 
              (propertize "${tags:10}" 'face 'org-tag)))

  (setq org-roam-directory (file-truename (format "%s/org-roam" my-org-directory)))
  (setq org-roam-completion-everywhere t)
   (org-roam-db-autosync-enable)
)
#+end_src
* orgnote
#+begin_src emacs-lisp
(use-package orgnote
  :disabled t
  :straight t
  :hook (org-mode . orgnote-sync-mode))
#+end_src
* Treesitter

the [[https://github.com/emacs-tree-sitter/elisp-tree-sitter][tree-sitter]] package is disabled to use the new builtin treesitter support of emacs 29+

with treesit-auto it's no more needed to install a shared library and point treesitter to load it like [[(setq treesit-extra-load-path '("/home/oxhart/builds/tree-sitter-module/dist"][Here]]

with treesit-auto you don't have to remap your self the major modes to point to their ts-mode version
 
#+begin_src emacs-lisp
;;(require 'treesit)
;;(setq treesit-extra-load-path '("/usr/local/lib"))
;;
;;  
;;  (push '(css-mode . css-ts-mode) major-mode-remap-alist)
;;  (push '(python-mode . python-ts-mode) major-mode-remap-alist)
;;  (push '(javascript-mode . js-ts-mode) major-mode-remap-alist)
;;  (push '(js-json-mode . json-ts-mode) major-mode-remap-alist)
;;  (push '(typescript-mode . typescript-ts-mode) major-mode-remap-alist)
;;  (push '(c-mode . c-ts-mode) major-mode-remap-alist)
;;  (push '(c++-mode . c++-ts-mode) major-mode-remap-alist)
(push '(yaml-mode . yaml-ts-mode) major-mode-remap-alist)
(push '(php-mode . php-ts-mode) major-mode-remap-alist)
(push '(rust-mode . rust-ts-mode) major-mode-remap-alist)
(use-package tree-sitter-langs
  :straight nil
  :disabled t
  :after tree-sitter
  ;;:defer 0
  )

(use-package treesit-auto
  :straight t
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

(use-package tree-sitter
  :straight t
  :disabled
  ;;:after tree-sitter-langs
  :config
  ;; Loading tree-sitter-modules from casouri/tree-sitter-module
  ;; Preventing from manually installing tree-sitter grammars
  (setq treesit-extra-load-path '("/home/oxhart/builds/tree-sitter-module/dist"))
  ;; Activate tree-sitter globally (minor mode registered on every buffer
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src

* Languages configuration
#+begin_src emacs-lisp
(unless (package-installed-p 'posframe)
(package-refresh-contents)
(package-install 'posframe))


(defvar c-popup-mode-map
(let ((map (make-sparse-keymap)))
(define-key map [t] 'quit-c-posframe)
map)
"Keymap for `c-popup-mode'.")

(define-minor-mode c-popup-mode
"Minor mode to quit the c popup"
:init-value nil
:lighter " C-Popup"
:keymap c-popup-mode-map
:global t
(if c-popup-mode
    (message "C popup mode enabled")
(message "C popup mode disabled")))

(defun compile-and-execute-c-code ()
"Save, compile, and execute C code, showing the result in a posframe."
(interactive)
;; Check if c-popup-mode is already on.
(when c-popup-mode
;; If it is, turn it off.
(c-popup-mode -1))
(let* ((temp-file "/tmp/input.c"))
(write-buffer-to-file (current-buffer) temp-file)
(let* ((result (execute-c-code temp-file))
        (output-buffer (get-buffer-create "*c-output*")))
    (with-current-buffer output-buffer
    (erase-buffer)
    (insert result))
    (let ((frame (posframe-show output-buffer
                                :position (point)
                                :font (face-attribute 'default :font)
                                :string nil
                                :background-color (face-attribute 'default :background nil t)
                                :foreground-color (face-attribute 'default :foreground nil t)
                                :internal-border-color "black"
                                :left-fringe 0
                                :right-fringe 0
                                :min-width 40
                                :min-height 10
                                :internal-border-width 1
                                :border-width 1
                                :override-parameters '((cursor-type . nil)))))
    ;; Manually set focus to the posframe.
    (select-frame-set-input-focus frame)
    (c-popup-mode 1)))))

(defun quit-c-posframe ()
"Delete all posframes and exit the c-popup-mode."
(interactive)
(posframe-delete-all)
(c-popup-mode -1))

(defun execute-c-code (temp-file)
"Compile and execute the C code in temp-file, and return the output as a string."
(with-temp-buffer
(call-process-shell-command (concat "gcc -o /tmp/output " temp-file " && /tmp/output") nil t)
(buffer-string)))

;;(global-set-key (kbd "C-c C-v") 'compile-and-execute-c-code)


;;(global-set-key (kbd "C-c b") 'switch-to-previous-buffer)
(defun compile-or-recompile ()
(interactive)
(if (get-buffer "*compilation*")
    (recompile)
(call-interactively 'compile)))

;;(global-set-key (kbd "C-c m") 'compile-or-recompile)
;;Change the size of the compilation height window to be 30%
(setq compilation-window-height (round (* 0.3 (frame-height))))
;; add a hook to adjust the height of the compilation window when the window change size

;;(defun adjust-compilation-window-height ()
;;(setq compilation-window-height (round (* 0.3 (frame-height)))))

;;(add-hook 'window-size-change-functions 'adjust-compilation-window-height)

;; kill current buffer without the annoying confirmation message
#+end_src
* Indentation
 Make emacs use spaces instead of tabs for reliability, as Emacs mix tabs and spaces for indentation. It does also breaks nixfmt: [[(setq-default indent-tabs-mode nil][Here]]
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq lisp-indent-offset 4)
#+end_src
* Combobulate
Actually to make work combobulate I have to download the git repo manually and use [[:load-path ("~/builds/combobulate/"][:load-path]]
so use-package can load it. By using straight it does not work. Waiting for this [[https://github.com/mickeynp/combobulate/issues/119][issue]] to be solved.
#+begin_src emacs-lisp
(use-package combobulate
  ;; :straight (combobulate :type git :host github :repo "mickeynp/combobulate")
  :custom
  ;; You can customize Combobulate's key prefix here.
  ;; Note that you may have to restart Emacs for this to take effect!
  (combobulate-key-prefix "C-c o")
  :hook ((prog-mode . combobulate-mode))
  ;; Amend this to the directory where you keep Combobulate's source
  ;; code.
  :load-path ("~/git_builds/combobulate/"))
#+end_src
* Indent-bars
#+begin_src emacs-lisp
(use-package indent-bars
  :straight (indent-bars :type git :host github :repo "jdtsmith/indent-bars")
  :custom
  (indent-bars-treesit-support t)
  (indent-bars-treesit-ignore-blank-lines-types '("module"))
  ;; Add other languages as needed
  (indent-bars-treesit-scope '((python function_definition class_definition for_statement
	  if_statement with_statement while_statement)))
  ;; wrap may not be needed if no-descend-list is enough
  ;;(indent-bars-treesit-wrap '((python argument_list parameters ; for python, as an example
  ;;				      list list_comprehension
  ;;				      dictionary dictionary_comprehension
  ;;				      parenthesized_expression subscript)))
  :hook ((python-base-mode yaml-mode c-ts-mode makefile-gmake-mode) . indent-bars-mode))

(use-package aggressive-indent
  :straight nil
  :disabled t
  :hook((python-base-mode yaml-mode c-mode makefile-gmake-mode) . agressive-indent-mode)
  :config
  (global-aggressive-indent-mode 1))
#+end_src
* Dash Docs
We are using consult-dash as an ui-front end to parse dash-docs
#+begin_src emacs-lisp
(use-package dash-docs
  :straight t
  :config
  (setq dash-docs-browser-func 'ox/read-dash-files)
  (use-package consult-dash
    :straight t
    :config
    (defun ox/read-dash-files(dash-docs-result-url &optional docset-name filename anchor)
      "Make dash files readable inside eww."
      ;;(eww-browse-url url)
      ;;(print dash-docs-result-url)
      (process-file-uri dash-docs-result-url)
      ;;(eww dash-docs-result-url)
      ;;(org-web-tools-read-url-as-org url)
      )
    ;; Use the symbol at point as initial search term
    (consult-customize consult-dash :initial (thing-at-point 'symbol)))
  (setq dash-docs-common-docsets '("C" "TypeScript")))
;;(org-web-tools-read-url-as-org "https://en.cppreference.com/w/c/keyword/for")
;;(eaf-open-browser "file:///home/oxhart/.docsets/C.docset/Contents/Resources/Documents/en.cppreference.com/w/c/keyword/for.html")

(defun extract-file-uri (input)
  "Extract the file URI with the 'file://' scheme from the input string."
  (let ((string-part (substring-no-properties input)))
    (if (string-match "^\\(file://.*\\)$" string-part)
        (match-string 1 string-part))))

;; Example function usage
(defun process-file-uri (input)
  "Example function that processes the file URI part."
  (let ((file-uri (extract-file-uri input)))
    (when file-uri
      (eaf-open-browser file-uri))))



#+end_src
* Devdocs
#+begin_src emacs-lisp
(use-package devdocs
  :straight t
  :hook ((python-ts-mode . (lambda () (setq-local devdocs-current-docs '("python~3.12")))))
  :config
  (defun ox/after-devdocs-lookup (&rest r)
  (delete-window))
  (advice-add #'devdocs-lookup :after 'ox/after-devdocs-lookup))


#+end_src
* eww
#+begin_src emacs-lisp
;; (use-package eww-lnum
;;   :straight t
;;   :config
;;   (with-eval-after-load 'eww
;;     (define-key eww-mode-map (kbd "f") 'eww-lnum-follow))
;;     (define-key eww-mode-map (kbd "F") 'eww-lnum-universal))

;; (use-package org-web-tools
;;   :straight t)
#+end_src
* Dired
#+begin_src emacs-lisp
  ;; This package allow single buffer navigation in Dired
  ;; like (dired-kill-when-opening-new-dired-buffer t) does
  ;; (use-package dired-single
  ;;   :config
  ;;   (evil-collection-define-key 'normal 'dired-mode-map
  ;;     "h" 'dired-single-up-directory
  ;;     "l" 'dired-single-buffer))
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (setq dired-kill-when-opening-new-dired-buffer t)
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file))

  (use-package all-the-icons-dired
    :straight t
    :hook (dired-mode . all-the-icons-dired-mode))

(use-package dirvish
  :after dired
  :straight t
  :init
  (dirvish-override-dired-mode)
  :config
    (defun my/faster-dirvish-previews ()
    "Disable intensive mode in file manager buffers."
    (when (or (derived-mode-p 'dired-mode)
	      (derived-mode-p 'dirvish-mode)
	      (string-match-p "PREVIEW ::" (buffer-name)))
	(setq-local global-treesit-auto-mode nil)
	(treesit-auto-mode -1)
	lsp-treemacs-sync-mode
	lsp-headerline-breadcrumb-mode
	lsp-ui-mode))

(add-hook 'after-change-major-mode-hook 
    #'my/faster-dirvish-previews
    :append)  ; APPEND is crucial - runs after mode activation

    (global-set-key (kbd "C-c d") 'dirvish)
      (evil-collection-define-key 'normal 'dired-mode-map
      "q" 'dirvish-quit))

  (use-package ranger
    ;;:straight t
    :disabled t
    :straight '(ranger :host github
		       ;;:local-repo "/home/oxhart/builds/ranger.el/"
		       :repo "S0mbr3/ranger.el"
		       :branch "ranger-setup-image-preview")
    :config
    (global-set-key (kbd "C-c d") 'ranger)
    (setq ranger-show-literal nil) ;; if nil show documents intead of text representation

    ;; Make the header line cleaned when quiting ranger or it stays (sound like a bug)
    (defun my/ranger-clear-header-line ()
      "Clear the header line."
      (setq header-line-format nil))

    (advice-add 'ranger-close :after #'my/ranger-clear-header-line))

(defun my/dired-check-features ()
  "Check if ranger and dirvish are loaded"
  (or (featurep 'ranger)
      (featurep' dirvish)))

    (use-package dired-hide-dotfiles
      :unless (featurep 'ranger)
      :straight t
      :hook (dired-mode . dired-hide-dotfiles-mode)
      :config
      (evil-collection-define-key 'normal 'dired-mode-map
	"H" 'dired-hide-dotfiles-mode))

    (use-package dired-preview
      :unless (my/dired-check-features)
      :straight t
      :hook (dired-mode . dired-preview-mode)
      :config
      (dired-preview-global-mode 1))

    (use-package dired-open
      :unless (featurep 'ranger)
      :straight t
      :after dired
      ;;:commands (dired dired-jump)
      :config
      ;; Strange behaviors not picking always the good program automatically
      ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
      (setq dired-open-extensions '(("png" . "feh")
				    ("mkv" . "mpv"))))

#+end_src
* SSH
#+begin_src emacs-lisp
(require 'tramp)
(use-package ssh-config-mode
  :straight t
  :mode (("~/.ssh/config\\'" . ssh-config-mode)
         ("sshd?_config\\'" . ssh-config-mode)))
(setq tramp-shell-prompt-pattern "\\(?:^\\|\\)[^]\n#-%>❯]*#?[]#-%>❯][[:blank:]]*")
(setq tramp-histfile-override nil) ;; Don't override zsh history in ssh
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "/sshx:ledeb:")
                   "remote-shell" "/usr/bin/zsh"))
(add-to-list 'tramp-connection-properties
             (list (regexp-quote "/ssh:ledeb:")
                   "remote-shell" "/usr/bin/zsh"))
(setq vterm-tramp-shells '(("docker" "/bin/sh")
			   ("ssh" "/usr/bin/zsh")))
(defun ox/ledeb-vterm ()
  "Open vterm in ledeb server"
  (interactive)
  (print "salut")
  (let ((default-directory "/ssh:ledeb:"))
    (multi-vterm)))

(defun ox/ledeb-dired ()
  "Open dired in ledeb server"
  (interactive)
    (dired "/ssh:ledeb:"))
#+end_src
* Gnuplot mode
#+begin_src emacs-lisp
(use-package gnuplot
  :straight t)
(use-package gnuplot-mode
  :straight t
  :config
  ;; automatically open files ending with .gp or .gnuplot in gnuplot mode
(setq auto-mode-alist 
      (append '(("\\.\\(gp\\|gnuplot\\)$" . gnuplot-mode)) auto-mode-alist)))
#+end_src
* Compilation Mode
#+begin_src emacs-lisp
(require 'ansi-color)
(add-hook 'compilation-filter-hook
          (lambda ()
            (ansi-color-apply-on-region (point-min) (point-max))))
;; (setq compilation-environment '("TERM=xterm-256color"))

;; When using compile or recompile command if there is some colord characters
;; it does not format well I had to use ansi-color with a hook in compilation mode

;; (require 'ansi-color)

;; (defun my-ansi-colorize-buffer ()
;;   (let ((buffer-read-only nil))
;;     (ansi-color-apply-on-region (point-min) (point-max))))

;; (add-hook 'compilation-filter-hook 'my-ansi-colorize-buffer)

;; (ignore-errors
;;   (require 'ansi-color)
;;   (defun my-colorize-compilation-buffer ()
;;     (when (eq major-mode 'compilation-mode)
;;       (ansi-color-apply-on-region compilation-filter-start (point-max))))
;;   (add-hook 'compilation-filter-hook 'my-colorize-compilation-buffer))

;; Builtin since emacs 28
;; (use-package ansi-color
;; :ensure nil
;; :hook (compilation-filter . ansi-color-compilation-filter)
;; :config
;; ;;(setq ansi-color-for-comint-mode t)
;; (setq compilation-environment '("TERM=xterm-256color")))
;;(add-hook 'compilation-filter-hook 'ansi-color-compilation-filter))

;; (defun colorize-compilation-buffer ()
;;   (when (eq major-mode 'compilation-mode)
;;     (ansi-color-apply-on-region compilation-filter-start (point-max))))

;; (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

;; (use-package xterm-color
;; :straight t
;; :config
;; (setq compilation-environment '("TERM=xterm-256color"))

;; (defun my/advice-compilation-filter (f proc string)
;;   (funcall f proc (xterm-color-filter string)))

;; (advice-add 'compilation-filter :around #'my/advice-compilation-filter))

#+end_src

* Updates
#+begin_src emacs-lisp
(use-package auto-package-update
  :straight t
  :defer 0
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "09:00"))
#+end_src
* PowerShell Attempt Configuration

#+begin_src emacs-lisp
;; Set PowerShell as default shell
;; (setq explicit-shell-file-name "C:/Program Files/PowerShell/7-preview/pw;; sh.exe")
;;(setq shell-file-name "C:/Program Files/PowerShell/7-preview/pwsh.exe")
;;(setq explicit-pwsh.exe-args '("-NoLogo" "-NonInteractive"))
;;(setenv "SHELL" shell-file-name)
;;(add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)

;;(use-package powershell
  ;;  :config
    ;; Change default compile command for powershell
    ;;(add-hook 'powershell-mode-hook
    ;;(lambda ()
      ;;(set (make-local-variable 'compile-command)
	;;   (format "powershell.exe -NoLogo -NonInteractive -Command \"& '%s'\""             (buffer-file-name))))))
;; Set PowerShell as default shell
;;(setq explicit-shell-file-name "C:/Program Files/PowerShell/7-preview/pwsh.exe")
;;(setq shell-file-name explicit-shell-file-name)
;;(add-to-list 'exec-path "C:/Program Files/PowerShell/7-preview/pwsh.exe")
;;(add-to-list 'exec-path "C:/Users/benja/Documents/PowerShell/Modules")
;;(add-to-list 'exec-path "C:/Program Files/PowerShell/Modules")
;;(add-to-list 'exec-path "c:program files/powershell/7-preview/Modules")
;;(add-to-list 'exec-path "C:/Program Files (x86)/WindowsPowerShell/Modules")
;;(add-to-list 'exec-path "C:/Windows/system32/WindowsPowerShell/v1.0/Modules")
;;(add-to-list 'exec-path "C:/Program Files (x86)/AutoIt3/AutoItX")
;;(global-set-key (kbd "M-o") 'multi-vterm-dedicated-toggle)
;;(global-set-key (kbd "C-f10") 'vterm-toggle)
;;:load-path "C:/Users/benja/builds/emacs-libvterm/")




;;(setq explicit-shell-file-name "C:/Program Files/PowerShell/7-preview/pwsh.exe")
;k(setq shell-file-name explicit-shell-file-name)
;;
;;(add-to-list 'exec-path "C:/Users/benja/AppData/Local/Programs/oh-my-posh/bin/")
;;(defun my-powershell ()
 ;; "Open a new shell buffer with PowerShell in interactive mode."
  ;;(interactive)
  ;;(let ((explicit-shell-args '("-NoExit" "-Command" "Set-Location C:\\Users\\YourUserName")) ; replace with your username
  ;;      (explicit-shell-file-name "C:/Program Files/PowerShell/7-preview/pwsh.exe"))
   ;; (call-interactively #'shell)))
;; To be able to use arrow key with comint-mode hook (for powershell)
;;(add-hook 'comint-mode-hook
  ;;        (lambda ()
    ;;        (define-key comint-mode-map (kbd "<up>") 'comint-previous-input)
      ;;      (define-key comint-mode-map (kbd "<down>") 'comint-next-input)))

#+end_src
* Games
#+begin_src emacs-lisp
(use-package chess
:straight t)
#+end_src
* Buffers
#+begin_src emacs-lisp
;;all-the-icons-ivy package is required to activate icons support in frog-jump-buffer
(use-package all-the-icons-ivy
  :straight t)
(use-package frog-jump-buffer
  :straight t
  :hook (frog-menu-after-init .  ox/custom-frog-face-outrun)
  :config
  (setq frog-jump-buffer-use-all-the-icons-ivy t)
  )

(defun ox/custom-frog-face-outrun ()
  "Tweak frog-menu visuals to be readable with transparent frames."
  ;; Settings both bg & fg to 'unspecified gives default colors
  (let ((bg 'unspecified)  ;; dark semi-transparent friendly color
        (fg "#f8f8f2")) ;; you can adapt this to match your theme
    (custom-set-faces
     `(frog-menu-border ((t (:background ,bg))))
     `(frog-menu-posframe ((t (:background ,bg :foreground ,fg))))
     `(frog-menu-prompt-face ((t (:foreground ,fg :weight bold :background ,bg))))
     `(frog-menu-actions-face ((t (:foreground ,fg :background ,bg))))
     `(frog-menu-candidates-face ((t (:foreground ,fg :background ,bg))))
     `(frog-menu-action-keybinding-face ((t (:foreground "#ff79c6" :background ,bg))))
     `(frog-menu-posframe-background-face ((t (:background ,bg))))
     `(avy-lead-face ((t (:foreground "#ff79c6" :background ,bg))))
     `(posframe-background-face ((t (:background ,bg)))))))

(setq frog-jump-buffer-posframe-parameters
      '((alpha . (100 . 100))           ; Make posframe less transparent
	(alpha-background . 60)
        (background-color ."#6600cc") ; Set a solid background color
        (foreground-color . "#e2e8f0") ; Set foreground color for contrast
        (internal-border-width . 2)
        (border-color . "#4a5568")))
#+end_src
* Window management
#+begin_src emacs-lisp
(ox/leader-keys
    "w" '(:ignore t :which-key "ace")
    "ww" '(ace-window :which-key "ace-window")
    "ws" '(ace-swap :which-key "ace-swap")
    "wd" '(ace-delete-window :which-key "ace-delete-window")
    "wo" '(ace-delete-other-windows : which-key "ace-delete-other-windows"))
#+end_src
* coc-damage-calculator
#+begin_src emacs-lisp
(use-package coc-dc
  :straight t
  :init
  (require 'hydra))
#+end_src
* drawing
#+begin_src emacs-lisp
(use-package edraw-org
  :after org
  :straight '(edraw-org :host github :repo "misohena/el-easydraw" :branch "master")
  :config
  (edraw-org-setup-default))
#+end_src

* ChatGpt
#+begin_src emacs-lisp
(use-package chatgpt
  :straight (:host github :repo "joshcho/ChatGPT.el" :files ("dist" "*.el"))
  :bind ("C-c q" . chatgpt-query))
#+end_src
* Codeium
We do add completion-at-point, corfu-expand and corfu insert to ensure *corfu* keep showing codeium completions while accepting completions.
#+begin_src emacs-lisp
(use-package codeium
  :disabled
  :straight '(codeium :host github :repo "Exafunction/codeium.el")
  :config
(dolist (element '(completion-at-point corfu-expand corfu-insert))
  (add-to-list 'corfu-auto-commands element)))
#+end_src

(Co)mingling of Codeium for Emacs with Overlays

A fork of codeium.el. Please review that site it for original install, usage, etc. If you think there is a bug with this implementation, feel free to send here.

This version replaces the Completion At Point Functions (CAPF) for Codeium served completions, with using overlays to present the completions. This allows normal CAPF to be used for other completion-at-point routines from Corfu, Company, etc. while still seeing and being able to accept the inline completions with this mode enabled.
#+begin_src emacs-lisp
(defvar my/comingle-is-enabled t)
(use-package comingle
  ;;:straight t
  :disabled t
  :after (pinentry) ;; for api-key in auth-source
  ;;:ensure t
  :straight '(:type git :host github :repo "jeff-phil/comingle.el")
  ;;:vc (:fetcher github :repo "jeff-phil/comingle.el" :rev "main")
  :diminish "🧠"
  ;;:load-path "~/git_builds/comingle.el/"
  :commands (my/comingle-toggle comingle-mode)
  :bind
  (("s-<return>" . comingle-accept-completion)
   ("S-<return>" . comingle-accept-completion-line)
   ("M-<return>" . comingle-accept-completion-word)
   ("C-<return>" . comingle-accept-completion-character)
   ("H-j" . comingle-next-completion)
   ("H-k" . comingle-prev-completion)
   ("H-C" . 'my/comingle-toggle)
   ("C-c p c" . comingle-chat-open)) ;;  launch chat
  :hook (prog-mode . my/try-run-comingle-mode)
  :init
  ;; optionally set a timer, which might speed up things as the
  ;; comingle local language server takes ~0.2s to start up
  (when (bound-and-true-p my/comingle-is-enabled)
    (add-hook 'emacs-startup-hook
              (lambda ()
                (run-with-timer
                 0.1
                 nil
                 (lambda ()
                   (when (comingle-state-proc comingle-state)
                     ;; temporarily disable comingle, so that we can init
                     (let ((my/comingle-is-enabled nil))
                       (my/comingle-toggle))))))))
  :config
  (defun my/try-run-comingle-mode ()
    "Use in hook, like prog-mode-hook, so that can test first if comingle is enabled."
    (when (bound-and-true-p my/comingle-is-enabled)
      (comingle-mode)))

  (defun my/comingle-toggle (&optional state)
    "Toggle comingle's enabled state."
    (interactive)
    (let ((current-state (or state comingle-state)))
      (cond
       ;; First condition: Is comingle currently enabled?
       (my/comingle-is-enabled
         (when (and current-state (comingle-state-proc current-state))
           ;; -> Then, disable it. No `progn` needed.
           (comingle-reset))
        (setq my/comingle-is-enabled nil)
        (message "Comingle disabled"))
       ;; if you don't want to use customize to save the api-key
       (t (setopt comingle/metadata/api_key
                  `,(auth-source-pass-get 'secret "ai/api_key@codeium.com"))
          ;; Reset only if it was already in a valid (but not running) state
          (when current-state
            (comingle-reset))
          (comingle-init)
          (setq my/comingle-is-enabled t)
          (message "Comingle enabled")))))

  (setq use-dialog-box nil) ;; do not use popup boxes

  ;; get comingle status in the modeline
  (setq comingle-mode-line-enable
        (lambda (api)
          (when (bound-and-true-p my/comingle-is-enabled)
            (not (memq api '(CancelRequest Heartbeat AcceptCompletion))))))
  (add-to-list 'mode-line-format '(:eval (car-safe comingle-mode-line)) t)
  ;; alternatively for a more extensive mode-line
  ;; (add-to-list 'mode-line-format '(-50 "" comingle-mode-line) t)

  ;; You can overwrite all the comingle configs!
  ;; for example, we recommend limiting the string sent to comingle for better perf
  (defun my/comingle/document/text ()
    (buffer-substring-no-properties
     (max (- (point) 3000) (point-min))
     (min (+ (point) 1000) (point-max))))
  ;; if you change the text, you should also change the cursor_offset
  ;; warning: this is measured by UTF-8 encoded bytes
  (defun my/comingle/document/cursor_offset ()
    (comingle-utf8-byte-length
     (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))
  (setq comingle/document/text 'my/comingle/document/text)
  (setq comingle/document/cursor_offset 'my/comingle/document/cursor_offset)

  (define-key global-map (kbd "s-<return>")
	      #'comingle-accept-completion)
  (define-key global-map (kbd "C--")
	      #'comingle-next-completion)
  (define-key global-map (kbd "C-=")
	      #'comingle-prev-completion))
#+end_src
* Codestral
#+begin_src emacs-lisp
(use-package codestral
  :straight (t :type git :host github :repo "BrachystochroneSD/codestral.el")
  ;;:init (global-codestral-mode)
  :custom
  (codestral-api-key "17FqVZfhIrHCuN2Q8xQt1k3ebi8mvcSp")
  (codestral-api-url "https://codestral.mistral.ai")
  :bind (("C-M-:" . global-codestral-mode)
         :map codestral-mode-map
         ("C-:" . codestral-accept-completion)
         ("C-=" . codestral-next-completion)
         ("C-;" . codestral-previous-completion)))
#+end_src
* supermaven
Supermaven.el is an Emacs plugin for supermaven AI code completion

Warning: This plugin is unofficial and based on code and binaries provided by https://github.com/supermaven-inc/supermaven-nvim and https://github.com/copilot-emacs/copilot.el.
#+begin_src emacs-lisp
(use-package supermaven
  :disabled t ;; not working actually
  :straight '(:type git :host github :repo "crazywolf132/supermaven.el"))

;; (add-to-list 'load-path "~/git_builds/supermaven.el")
;; (require 'supermaven)
;; (add-hook 'prog-mode-hook 'supermaven-mode)
#+end_src
* GitHub Copilot
#+begin_src emacs-lisp
(use-package copilot
  :straight (:host github :repo "copilot-emacs/copilot.el" :files ("*.el"))
  :config
  ;; Used to define if we are using copilot, nil if its not the case
  (setq my/completion-engine "copilot")
    :bind (:map copilot-mode-map
	      ("s-<return>" . copilot-accept-completion)
	      ("s-]" . copilot-next-completion)
	      ("s-[" . copilot-previous-completion)
	      ("s-c" . copilot-accept-completion-by-word)))
#+end_src
* gptel
#+begin_src emacs-lisp
(defun my/toggle-completions ()
  "Toggle AI completions modes"
  (interactive)
  (cond 
   ((equal my/completion-engine "copilot")
    (if (eq copilot-mode t)
	(progn (copilot-mode -1)
	       (message "Copilot disabled"))
      (progn (copilot-mode 1)
	     (message "Copilot enabled")))
    )
   ((equal my/completion-engine "comingle")
   (if (eq comingle-mode t)
	   (progn (comingle-mode -1)
	      (message "Comingle disabled"))
	 (progn (comingle-mode 1)
	    (message "Comingle enabled"))))
   ((equal my/completion-engine "supermaven")
    (if (eq supermaven-mode t))
   	(progn (supermaven-mode -1)
	       (message "Supermaven disabled"))
	  (progn (supermaven-mode 1)
	     (message "Supermaven enabled")))))

(use-package gptel
  :straight t
  :after general
  :config
  (ox/leader-keys
    "g" '(:ignore t :which-key "gptel")
    "gm" '(gptel-menu :which-key "Open gptel-menu")
    "gc" '(gptel :which-key "Open gptel chats buffers")
    "gx" '(my/toggle-completions :which-key "Toggle AI completions")
    "gs" '(gptel-send :whick-key "gptel-send"))
  (defun my-groq-api-key ()
    (let ((auth-info (auth-source-search
		      :host "api.groq.com"
		      :user "apikey"
		      :require '(:secret))))
      (if auth-info
	  (funcall (plist-get (car auth-info) :secret))
	(error "Groq API key not found in .authinfo"))))

  
  (defun my-openai-api-key ()
    (let ((auth-info (auth-source-search
		      :host "api.openai.com"
		      :user "apikey"
		      :require '(:secret))))
      (if auth-info
	  (funcall (plist-get (car auth-info) :secret))
	(error "OpenAI API key not found in .authinfo"))))

  ;; (defun my-mistral-api-key ()
  ;;   (let ((auth-info (auth-source-search
  ;; 		      :host "api.mistral.ai"
  ;; 		      :user "apikey"
  ;; 		      :require '(:secret))))
  ;;     (if auth-info
  ;; 	  (funcall (plist-get (car auth-info) :secret))
  ;; 	(error "Mistral API key not found in .authinfo"))))

  ;; (defun my-mistral-setup ()
  ;;   (setq gptel-model 'gpt-3.5-turbo)
  ;;   (setq gptel-api-key #'my-mistral-api-key))
  
  (defun my-openai-setup ()
    (setq gptel-model 'gpt-4o-mini)
    (setq gptel-api-key #'my-openai-api-key))
  ;; Groq offers an OpenAI compatible API
  (defun my-groq-setup ()
    (setq gptel-model   'llama-3.3-70b-versatile
	  gptel-backend
	  (gptel-make-openai "Groq"               ;Any name you want
	    :host "api.groq.com"
	    :endpoint "/openai/v1/chat/completions"
	    :stream t
	    :key #'my-groq-api-key                   ;can be a function that returns the key
	    :models '(llama-3.3-70b-versatile
		      mixtral-8x7b-32768
		      gemma-7b-it))))
  (my-groq-setup))
#+end_src
* package creation
#+begin_src emacs-lisp
(use-package package-build
  :straight t)

(use-package package-lint
  :straight t)

(use-package flycheck-package
  :straight t
  :config
  :after flycheck)
#+end_src
* Encryption
#+begin_src emacs-lisp
(use-package sops
  :straight t
  :init
  (global-sops-mode 1))
#+end_src
* emacs-reader
 An all-in-one document reader for GNU Emacs, supporting all [[https://codeberg.org/divyaranjan/emacs-reader/src/branch/master/%2A%20Supported%20Formats][major document formats]]. This package intends to take from =doc-view=, =nov.el=, and =pdf-tools= and make them better. And as such, it is effectively a *drop-in replacement* for them

 #+begin_src emacs-lisp
  (use-package reader
    :disabled t
    :straight '(reader :type git :host codeberg :repo "divyaranjan/emacs-reader"
  	      :files ("*.el" "render-core.dylib")
  	      :pre-build ("make" "all")))

;;       Manual install of emacs-reader
;; (add-to-list 'load-path "/Users/nebj/git_builds/emacs-reader")
;; (autoload 'reader--saveplace-to-alist "reader-saveplace")
;; (require 'reader)
;; (dolist (rx '("\\.pdf\\'" "\\.epub\\'" "\\.mobi\\'" "\\.fb2\\'"
;;               "\\.xps\\'" "\\.cbz\\'"
;;               "\\.odt\\'" "\\.ods\\'" "\\.odp\\'" "\\.odg\\'"
;;               "\\.docx\\'" "\\.pptx\\'" "\\.xlsx\\'"))
;;   (add-to-list 'auto-mode-alist (cons rx 'reader-mode)))
 #+end_src

* Runtime Performance
#+begin_src emacs-lisp
;; Make gc pauses faster by decreasubg tge threshold.
;;(setq gc-cons-threshold (* 2 1000 000))
#+end_src
